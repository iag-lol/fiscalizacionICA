<!DOCTYPE html>
<html lang="es" class="light">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SCF - Control Fiscalizaciones</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/luxon/3.3.0/luxon.min.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                            800: '#075985',
                            900: '#0c4a6e',
                        },
                    },
                    animation: {
                        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                    }
                }
            }
        }
    </script>
    <style>
        /* Estilos Generales y Fuentes */
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        /* Transiciones suaves */
        .transition-all {
            transition: all 0.3s ease;
        }

        /* Animación para alertas */
        @keyframes slideInRight {
            0% {
                transform: translateX(100%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .slide-in-right {
            animation: slideInRight 0.5s forwards;
        }

        /* Estilos para impresión del modal */
        @media print {
            body * {
                visibility: hidden;
            }

            #sidebar,
            #menu-button,
            header,
            .modal-buttons,
            .status-dropdown button,
            .no-print {
                display: none !important;
            }

            main {
                overflow: visible !important;
            }

            body,
            html {
                height: auto;
                overflow: visible;
                background-color: white !important;
                color: black !important;
            }

            #detalle-modal {
                position: absolute !important;
                top: 0;
                left: 0;
                right: 0;
                display: block !important;
                background: none !important;
            }

            #detalle-modal>div {
                position: static !important;
                width: 100% !important;
                max-width: 100% !important;
                box-shadow: none !important;
                border: none !important;
                margin: 0 !important;
                padding: 0 !important;
            }

            #modal-imprimir,
            #modal-imprimir * {
                visibility: visible;
            }

            #modal-imprimir {
                width: 100%;
            }

            #modal-imprimir h3 {
                font-size: 1.5rem;
                margin-bottom: 1rem;
                color: black !important;
            }

            #modal-imprimir strong {
                font-weight: 600;
                color: black !important;
            }

            #modal-imprimir .grid {
                display: block;
            }

            #modal-imprimir .grid>div {
                margin-bottom: 0.5rem;
            }

            #modal-imprimir .border {
                border: 1px solid #ccc !important;
            }

            #modal-imprimir span[class*="bg-"] {
                background-color: transparent !important;
                color: black !important;
                border: 1px solid #ccc !important;
                padding: 1px 4px !important;
            }

            #modal-imprimir p,
            #modal-imprimir div {
                color: black !important;
            }
        }

        /* Estilo para sidebar */
        #sidebar {
            transition: transform 0.3s ease-in-out;
            z-index: 50;
        }

        @media (max-width: 768px) {
            #sidebar {
                transform: translateX(-100%);
            }

            #sidebar.open {
                transform: translateX(0);
            }
        }

        /* Estilos para el dropdown de cambio de estado */
        .status-dropdown {
            position: relative;
            display: inline-block;
        }

        .status-options {
            display: none;
            position: absolute;
            min-width: 150px;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.15);
            z-index: 10;
            right: 0;
            margin-top: 0.25rem;
            border-radius: 0.375rem;
            overflow: hidden;
        }

        .status-options a {
            padding: 10px 15px;
            text-decoration: none;
            display: block;
            font-size: 0.875rem;
            white-space: nowrap;
        }

        /* Mostrar dropdown al hacer hover */
        .status-dropdown:hover .status-options {
            display: block;
        }

        /* Feedback visual para carga */
        .loading-inline {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            margin-left: 0.5rem;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Scrollbar personalizado */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        .light ::-webkit-scrollbar-track {
            background: #f3f4f6;
        }

        .light ::-webkit-scrollbar-thumb {
            background: #d1d5db;
            border-radius: 4px;
        }

        .light ::-webkit-scrollbar-thumb:hover {
            background: #9ca3af;
        }

        .dark ::-webkit-scrollbar-track {
            background: #1f2937;
        }

        .dark ::-webkit-scrollbar-thumb {
            background: #4b5563;
            border-radius: 4px;
        }

        .dark ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }

        /* Tooltip personalizado */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: auto;
            min-width: 120px;
            text-align: center;
            padding: 5px 10px;
            border-radius: 6px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.75rem;
            white-space: nowrap;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Estilos para shimmer loading effect */
        .shimmer {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
            border-radius: 4px;
        }

        .dark .shimmer {
            background: linear-gradient(90deg, #2a2f38 25%, #1f242d 50%, #2a2f38 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }

        @keyframes shimmer {
            0% {
                background-position: -100% 0;
            }
            100% {
                background-position: 100% 0;
            }
        }

        /* Estilo para badge animada */
        .badge-ping::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 9999px;
            animation: ping 1.5s cubic-bezier(0, 0, 0.2, 1) infinite;
        }

        @keyframes ping {
            0% {
                transform: scale(1);
                opacity: 0.5;
            }
            75%, 100% {
                transform: scale(2);
                opacity: 0;
            }
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>

<body class="bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100 transition-colors">
    <!-- Alertas System -->
    <div id="alerts-container" class="fixed top-4 right-4 z-50 flex flex-col gap-3 w-80 pointer-events-none"></div>
    
    <div class="flex h-screen overflow-hidden">
        <!-- Sidebar -->
        <aside id="sidebar" class="w-64 bg-white dark:bg-gray-800 shadow-lg fixed inset-y-0 left-0 z-40 md:relative md:translate-x-0 print:hidden transition-all">
            <div class="flex flex-col h-full">
                <div class="p-5 border-b dark:border-gray-700">
                    <div class="flex items-center mb-6 space-x-2">
                        <div class="bg-primary-600 text-white p-2 rounded-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2" />
                                <path d="M18 14h-8" />
                                <path d="M15 18h-5" />
                                <path d="M10 6h8v4h-8V6Z" />
                            </svg>
                        </div>
                        <div>
                            <h1 class="text-xl font-bold">SCF App</h1>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Control de Fiscalizaciones</p>
                        </div>
                    </div>
                </div>

                <nav class="p-4 flex-1 overflow-y-auto">
                    <div class="mb-6">
                        <h3 class="uppercase text-xs font-semibold text-gray-500 dark:text-gray-400 tracking-wider mb-3 px-3">Principal</h3>
                        <ul class="space-y-1">
                            <li>
                                <a href="#" data-view="dashboard" class="nav-link flex items-center p-3 text-sm rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 group transition-all">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-3 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-all">
                                        <rect width="7" height="9" x="3" y="3" rx="1" />
                                        <rect width="7" height="5" x="14" y="3" rx="1" />
                                        <rect width="7" height="9" x="14" y="12" rx="1" />
                                        <rect width="7" height="5" x="3" y="16" rx="1" />
                                    </svg>
                                    Dashboard
                                </a>
                            </li>
                            <li>
                                <a href="#" data-view="registrar" class="nav-link flex items-center p-3 text-sm rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 group transition-all">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-3 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-all">
                                        <rect width="8" height="4" x="8" y="2" rx="1" ry="1" />
                                        <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
                                        <path d="M9 14h6" />
                                        <path d="M12 11v6" />
                                    </svg>
                                    Registrar Inspección
                                </a>
                            </li>
                            <li>
                                <a href="#" data-view="lista" class="nav-link flex items-center p-3 text-sm rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 group transition-all">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-3 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-all">
                                        <line x1="8" x2="21" y1="6" y2="6" />
                                        <line x1="8" x2="21" y1="12" y2="12" />
                                        <line x1="8" x2="21" y1="18" y2="18" />
                                        <line x1="3" x2="3.01" y1="6" y2="6" />
                                        <line x1="3" x2="3.01" y1="12" y2="12" />
                                        <line x1="3" x2="3.01" y1="18" y2="18" />
                                    </svg>
                                    Ver Inspecciones
                                </a>
                            </li>
                        </ul>
                    </div>

                    <div class="mb-6">
                        <h3 class="uppercase text-xs font-semibold text-gray-500 dark:text-gray-400 tracking-wider mb-3 px-3">Análisis</h3>
                        <ul class="space-y-1">
                            <li>
                                <a href="#" data-view="reportes" class="nav-link flex items-center p-3 text-sm rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 group transition-all">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-3 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-all">
                                        <path d="M21.21 15.89A10 10 0 1 1 8 2.83" />
                                        <path d="M22 12A10 10 0 0 0 12 2v10z" />
                                    </svg>
                                    Reportes
                                </a>
                            </li>
                        </ul>
                    </div>
                </nav>

                <div class="p-4 border-t dark:border-gray-700 mt-auto">
                    <!-- Theme Switcher -->
                    <button id="theme-toggle" class="w-full flex items-center justify-center p-2 text-sm rounded-lg transition-colors bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" id="theme-toggle-dark-icon" class="hidden dark:inline-block mr-2">
                            <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" />
                        </svg>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" id="theme-toggle-light-icon" class="inline-block dark:hidden mr-2">
                            <circle cx="12" cy="12" r="4" />
                            <path d="M12 2v2" />
                            <path d="M12 20v2" />
                            <path d="m4.93 4.93 1.41 1.41" />
                            <path d="m17.66 17.66 1.41 1.41" />
                            <path d="M2 12h2" />
                            <path d="M20 12h2" />
                            <path d="m6.34 17.66-1.41 1.41" />
                            <path d="m19.07 4.93-1.41 1.41" />
                        </svg>
                        <span id="theme-toggle-text">Cambiar a Modo Oscuro</span>
                    </button>
                </div>
            </div>
        </aside>

        <div id="sidebar-overlay" class="fixed inset-0 bg-black opacity-50 z-30 hidden md:hidden print:hidden"></div>

        <main class="flex-1 flex flex-col overflow-hidden bg-gray-50 dark:bg-gray-900 transition-colors">
            <header class="bg-white dark:bg-gray-800 shadow-sm p-4 flex justify-between items-center print:hidden transition-colors">
                <div class="flex items-center">
                    <button id="menu-button" class="text-gray-600 dark:text-gray-300 mr-4 focus:outline-none md:hidden">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <line x1="4" x2="20" y1="12" y2="12" />
                            <line x1="4" x2="20" y1="6" y2="6" />
                            <line x1="4" x2="20" y1="18" y2="18" />
                        </svg>
                    </button>
                    <h2 id="view-title" class="text-xl font-semibold text-gray-800 dark:text-gray-100">Dashboard</h2>
                </div>

                <div class="flex items-center space-x-3">
                    <!-- Botón de registro rápido -->
                    <button id="quick-register-button" class="md:hidden flex items-center px-3 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1">
                            <path d="M5 12h14" />
                            <path d="M12 5v14" />
                        </svg>
                        Registrar
                    </button>

                    <!-- Notificaciones -->
                    <div class="relative">
                        <button id="notification-button" class="relative p-1 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 focus:outline-none transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
                                <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
                            </svg>
                            <span id="notification-count" class="hidden absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-4 w-4 flex items-center justify-center">0</span>
                        </button>
                    </div>
                </div>
            </header>

            <div class="flex-1 overflow-y-auto p-4 md:p-6">
                <!-- Dashboard View -->
                <div id="dashboard-view" class="view-container">
                    <!-- Dashboard Header -->
                    <div class="mb-6">
                        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                            <div>
                                <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Resumen General</h3>
                                <p class="text-sm text-gray-500 dark:text-gray-400">Visualiza el estado actual de las inspecciones</p>
                            </div>
                            <div class="flex flex-wrap items-center gap-3">
                                <div>
                                    <label for="dashboard-filter-terminal" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Filtrar Terminal:</label>
                                    <select id="dashboard-filter-terminal" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                        <option value="">Todos</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="dashboard-date-range" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Período:</label>
                                    <select id="dashboard-date-range" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                        <option value="today">Hoy</option>
                                        <option value="week">Esta semana</option>
                                        <option value="month">Este mes</option>
                                        <option value="all">Todos</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Stats Cards -->
                    <div id="dashboard-kpis" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <!-- KPI Cards -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-md">
                            <div class="flex justify-between items-center mb-3">
                                <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Inspecciones Hoy</h4>
                                <span class="p-2 rounded-full bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <rect width="18" height="18" x="3" y="4" rx="2" ry="2" />
                                        <line x1="16" x2="16" y1="2" y2="6" />
                                        <line x1="8" x2="8" y1="2" y2="6" />
                                        <line x1="3" x2="21" y1="10" y2="10" />
                                        <path d="M8 14h.01" />
                                        <path d="M12 14h.01" />
                                        <path d="M16 14h.01" />
                                        <path d="M8 18h.01" />
                                        <path d="M12 18h.01" />
                                        <path d="M16 18h.01" />
                                    </svg>
                                </span>
                            </div>
                            <div class="flex items-end">
                                <p id="kpi-hoy" class="text-3xl font-bold text-gray-800 dark:text-white mb-1">...</p>
                                <span id="kpi-hoy-change" class="ml-2 text-xs font-medium mb-2"></span>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">vs. promedio diario</p>
                        </div>

                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-md">
                            <div class="flex justify-between items-center mb-3">
                                <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Pendientes</h4>
                                <span class="p-2 rounded-full bg-red-50 dark:bg-red-900/30 text-red-600 dark:text-red-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" />
                                        <path d="M16 2v4" />
                                        <path d="M8 2v4" />
                                        <path d="M3 10h18" />
                                        <circle cx="18" cy="18" r="3" />
                                        <path d="M18 15v3" />
                                    </svg>
                                </span>
                            </div>
                            <div class="flex items-end">
                                <p id="kpi-pendientes" class="text-3xl font-bold text-gray-800 dark:text-white mb-1">...</p>
                                <span id="kpi-pendientes-badge" class="ml-2 text-xs font-medium px-2 py-1 rounded bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400">Urgente</span>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Requieren atención inmediata</p>
                        </div>

                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-md">
                            <div class="flex justify-between items-center mb-3">
                                <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">En Revisión</h4>
                                <span class="p-2 rounded-full bg-yellow-50 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                                        <path d="M14 2v6h6" />
                                        <path d="M16 13H8" />
                                        <path d="M16 17H8" />
                                        <path d="M10 9H8" />
                                    </svg>
                                </span>
                            </div>
                            <div class="flex items-end">
                                <p id="kpi-revision" class="text-3xl font-bold text-gray-800 dark:text-white mb-1">...</p>
                                <span id="kpi-revision-change" class="ml-2 text-xs font-medium mb-2"></span>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">En proceso de solución</p>
                        </div>

                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-md">
                            <div class="flex justify-between items-center mb-3">
                                <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Solucionadas</h4>
                                <span class="p-2 rounded-full bg-green-50 dark:bg-green-900/30 text-green-600 dark:text-green-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" />
                                        <path d="m9 12 2 2 4-4" />
                                    </svg>
                                </span>
                            </div>
                            <div class="flex items-end">
                                <p id="kpi-solucionadas" class="text-3xl font-bold text-gray-800 dark:text-white mb-1">...</p>
                                <span id="kpi-solucionadas-change" class="ml-2 text-xs font-medium mb-2 text-green-600 dark:text-green-400"></span>
                            </div>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Total completadas</p>
                        </div>
                    </div>

                    <!-- Charts Grid -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <!-- Estado de inspecciones chart -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Distribución de Estados</h4>
                            <div class="h-64 relative">
                                <canvas id="inspeccionesChart"></canvas>
                            </div>
                        </div>

                        <!-- Tendencia de inspecciones -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Tendencia de Inspecciones</h4>
                            <div class="h-64 relative">
                                <canvas id="tendenciaChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Terminal and Recent Inspections -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Distribución por Terminal -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 md:col-span-1">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Top Terminales</h4>
                            <div class="h-64 relative">
                                <canvas id="terminalesChart"></canvas>
                            </div>
                        </div>

                        <!-- Recent inspections -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 md:col-span-2">
                            <div class="flex justify-between items-center mb-4">
                                <h4 class="text-lg font-semibold text-gray-800 dark:text-white">Inspecciones Recientes</h4>
                                <a href="#" data-view="lista" class="text-sm text-primary-600 dark:text-primary-400 hover:underline">Ver todas</a>
                            </div>
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                    <thead>
                                        <tr>
                                            <th class="px-3 py-3 bg-gray-50 dark:bg-gray-700/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">PPU</th>
                                            <th class="px-3 py-3 bg-gray-50 dark:bg-gray-700/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Terminal</th>
                                            <th class="px-3 py-3 bg-gray-50 dark:bg-gray-700/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Estado</th>
                                            <th class="px-3 py-3 bg-gray-50 dark:bg-gray-700/50 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Fecha</th>
                                        </tr>
                                    </thead>
                                    <tbody id="recent-inspections" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                        <tr>
                                            <td colspan="4" class="px-3 py-4 text-center text-sm text-gray-500 dark:text-gray-400">Cargando...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Registrar View -->
                <div id="registrar-view" class="view-container hidden">
                    <div class="mb-6">
                        <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Nueva Inspección</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Registre los detalles de la fiscalización ICA A18</p>
                    </div>

                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700">
                        <div class="p-5 border-b border-gray-200 dark:border-gray-700">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white">Formulario de Inspección</h4>
                        </div>

                        <form id="registro-form" class="p-5">
                            <fieldset class="mb-6 border-b border-gray-200 dark:border-gray-700 pb-6">
                                <legend class="text-base font-semibold text-gray-800 dark:text-white mb-4">Información General</legend>
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <div>
                                        <label for="fiscalizador" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Nombre Fiscalizador <span class="text-red-500">*</span></label>
                                        <input type="text" id="fiscalizador" name="fiscalizador" required class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    </div>
                                    <div>
                                        <label for="registrador" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Nombre Registrador <span class="text-red-500">*</span></label>
                                        <input type="text" id="registrador" name="registrador" required class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    </div>
                                    <div>
                                        <label for="terminal" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Terminal <span class="text-red-500">*</span></label>
                                        <select id="terminal" name="terminal" required class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                            <option value="">Cargando...</option>
                                        </select>
                                        <div id="terminal-error-container" class="mt-1"></div>
                                    </div>
                                    <div>
                                        <label for="ppu" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">PPU del Bus <span class="text-red-500">*</span></label>
                                        <select id="ppu" name="ppu" required class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                            <option value="">Cargando...</option>
                                        </select>
                                        <div id="ppu-error-container" class="mt-1"></div>
                                    </div>
                                    <div>
                                        <label for="estado_inicial" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado Inicial <span class="text-red-500">*</span></label>
                                        <select id="estado_inicial" name="estado_inicial" required class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                            <option value="Pendiente">Pendiente</option>
                                            <option value="En Revisión">En Revisión</option>
                                            <option value="Solucionado">Solucionado</option>
                                        </select>
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="mb-6 border-b border-gray-200 dark:border-gray-700 pb-6">
                                <legend class="text-base font-semibold text-gray-800 dark:text-white mb-4">Asignaciones (Opcional)</legend>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label for="supervisor" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Asignar Supervisor</label>
                                        <select id="supervisor" name="supervisor" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                            <option value="">Sin asignar</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label for="cleaner" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Asignar Cleaner</label>
                                        <select id="cleaner" name="cleaner" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                            <option value="">Sin asignar</option>
                                        </select>
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="mb-6 border-b border-gray-200 dark:border-gray-700 pb-6">
                                <div class="flex justify-between mb-4">
                                    <legend class="text-base font-semibold text-gray-800 dark:text-white">Criterios de Inspección (ICA A18)</legend>
                                    <div class="text-sm">
                                        <span id="criterios-completados" class="font-medium text-primary-600 dark:text-primary-400">0/0</span> completados
                                    </div>
                                </div>
                                <div id="criterios-container" class="space-y-4">
                                    <div class="flex items-center justify-center py-6">
                                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 dark:border-primary-400"></div>
                                        <span class="ml-3 text-gray-500 dark:text-gray-400">Cargando criterios...</span>
                                    </div>
                                </div>
                            </fieldset>

                            <div class="mb-6">
                                <label for="observaciones_generales" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Observaciones Generales (Opcional)</label>
                                <textarea id="observaciones_generales" name="observaciones_generales" rows="3" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors" placeholder="Añadir comentarios generales sobre la inspección..."></textarea>
                            </div>

                            <div class="flex items-center justify-between flex-wrap gap-4">
                                <div>
                                    <button type="submit" id="submit-button" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z" />
                                            <polyline points="17 21 17 13 7 13 7 21" />
                                            <polyline points="7 3 7 8 15 8" />
                                        </svg>
                                        Guardar Inspección
                                    </button>
                                </div>
                                <p id="form-message" class="text-sm font-medium"></p>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Lista View -->
                <div id="lista-view" class="view-container hidden">
                    <div class="mb-6">
                        <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Listado de Inspecciones</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Gestione y filtre todas las inspecciones registradas</p>
                    </div>

                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 mb-6">
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 items-end">
                            <div>
                                <label for="search-ppu" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Buscar PPU</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400 dark:text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <circle cx="11" cy="11" r="8" />
                                            <path d="m21 21-4.3-4.3" />
                                        </svg>
                                    </div>
                                    <input type="text" id="search-ppu" placeholder="Ej: LXWP57" class="pl-10 w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                </div>
                            </div>
                            <div>
                                <label for="filter-terminal" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Terminal</label>
                                <select id="filter-terminal" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    <option value="">Todos</option>
                                </select>
                            </div>
                            <div>
                                <label for="filter-estado" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado</label>
                                <select id="filter-estado" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    <option value="">Todos</option>
                                    <option value="Pendiente">Pendiente</option>
                                    <option value="En Revisión">En Revisión</option>
                                    <option value="Solucionado">Solucionado</option>
                                </select>
                            </div>
                            <div>
                                <label for="filter-fecha-inicio" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Fecha Desde</label>
                                <input type="date" id="filter-fecha-inicio" title="Fecha inicio" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                            </div>
                            <div>
                                <label for="filter-fecha-fin" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Fecha Hasta</label>
                                <input type="date" id="filter-fecha-fin" title="Fecha fin" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                            </div>
                        </div>
                        <div class="mt-4 flex items-center justify-between">
                            <button id="apply-filters-button" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 3H2l8 9.46V19l4 2v-8.54L22 3z" />
                                </svg>
                                Aplicar Filtros
                            </button>
                            <button id="export-button" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                                    <polyline points="7 10 12 15 17 10" />
                                    <line x1="12" x2="12" y1="15" y2="3" />
                                </svg>
                                Exportar
                            </button>
                        </div>
                    </div>

                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                        <div id="lista-table-container" class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                <thead>
                                    <tr class="bg-gray-50 dark:bg-gray-700/50">
                                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">PPU</th>
                                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Fecha</th>
                                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Terminal</th>
                                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Fiscalizador</th>
                                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Estado</th>
                                        <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody id="inspecciones-tbody" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                    <tr>
                                        <td colspan="6" class="px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                                            <div class="flex flex-col items-center justify-center">
                                                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 dark:border-primary-400 mb-3"></div>
                                                <p>Cargando inspecciones...</p>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div id="lista-error-container" class="p-4 text-center"></div>
                        
                        <!-- Paginación -->
                        <div class="bg-white dark:bg-gray-800 px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6">
                            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                                <div>
                                    <p id="pagination-info" class="text-sm text-gray-700 dark:text-gray-300">
                                        Mostrando <span class="font-medium" id="pagination-start">0</span> a <span class="font-medium" id="pagination-end">0</span> de <span class="font-medium" id="pagination-total">0</span> resultados
                                    </p>
                                </div>
                                <div>
                                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                        <button id="pagination-prev" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                                            <span class="sr-only">Anterior</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <polyline points="15 18 9 12 15 6" />
                                            </svg>
                                        </button>
                                        <div id="pagination-buttons" class="flex items-center">
                                            <!-- Botones de página generados dinámicamente -->
                                        </div>
                                        <button id="pagination-next" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                                            <span class="sr-only">Siguiente</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <polyline points="9 18 15 12 9 6" />
                                            </svg>
                                        </button>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Reportes View -->
                <div id="reportes-view" class="view-container hidden">
                    <div class="mb-6">
                        <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Reportes y Análisis</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Métricas detalladas y reportes avanzados</p>
                    </div>

                    <!-- Filtros de Reporte -->
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700 mb-6">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Filtros del Reporte</h4>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label for="reporte-periodo" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Período</label>
                                <select id="reporte-periodo" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    <option value="week">Esta semana</option>
                                    <option value="month">Este mes</option>
                                    <option value="quarter">Este trimestre</option>
                                    <option value="year">Este año</option>
                                    <option value="custom">Personalizado</option>
                                </select>
                            </div>
                            <div>
                                <label for="reporte-terminal" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Terminal</label>
                                <select id="reporte-terminal" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    <option value="">Todos los terminales</option>
                                </select>
                            </div>
                            <div>
                                <label for="reporte-tipo" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tipo de Reporte</label>
                                <select id="reporte-tipo" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                    <option value="general">General</option>
                                    <option value="terminal">Por Terminal</option>
                                    <option value="criteria">Por Criterio</option>
                                </select>
                            </div>
                        </div>
                        <div id="fechas-personalizadas" class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4 hidden">
                            <div>
                                <label for="reporte-fecha-inicio" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Fecha Inicio</label>
                                <input type="date" id="reporte-fecha-inicio" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                            </div>
                            <div>
                                <label for="reporte-fecha-fin" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Fecha Fin</label>
                                <input type="date" id="reporte-fecha-fin" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                            </div>
                        </div>
                        <div class="mt-4">
                            <button id="generar-reporte-btn" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M21 12V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7.5" />
                                    <path d="M16 2v4" />
                                    <path d="M8 2v4" />
                                    <path d="M3 10h18" />
                                    <path d="M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                                    <path d="m22 22-1.5-1.5" />
                                </svg>
                                Generar Reporte
                            </button>
                        </div>
                    </div>

                    <!-- Contenido del Reporte -->
                    <div id="reporte-content" class="space-y-6">
                        <!-- Resumen -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Resumen General</h4>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div class="p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg">
                                    <p class="text-sm font-medium text-blue-700 dark:text-blue-300 mb-1">Total Inspecciones</p>
                                    <p id="reporte-total" class="text-2xl font-bold text-blue-800 dark:text-blue-200">-</p>
                                </div>
                                <div class="p-4 bg-green-50 dark:bg-green-900/30 rounded-lg">
                                    <p class="text-sm font-medium text-green-700 dark:text-green-300 mb-1">Tasa de Cumplimiento</p>
                                    <p id="reporte-tasa-cumplimiento" class="text-2xl font-bold text-green-800 dark:text-green-200">-</p>
                                </div>
                                <div class="p-4 bg-amber-50 dark:bg-amber-900/30 rounded-lg">
                                    <p class="text-sm font-medium text-amber-700 dark:text-amber-300 mb-1">Tiempo Promedio Resolución</p>
                                    <p id="reporte-tiempo-promedio" class="text-2xl font-bold text-amber-800 dark:text-amber-200">-</p>
                                </div>
                            </div>
                        </div>

                        <!-- Gráficos -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Tendencia estado temporal -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700">
                                <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Tendencia Temporal</h4>
                                <div class="h-64 relative">
                                    <canvas id="reporte-tendencia-chart"></canvas>
                                </div>
                            </div>

                            <!-- Distribución por criterio -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700">
                                <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Cumplimiento por Criterio</h4>
                                <div class="h-64 relative">
                                    <canvas id="reporte-criterios-chart"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Tabla de Criterios Problemáticos -->
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-100 dark:border-gray-700">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Criterios Críticos</h4>
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                    <thead class="bg-gray-50 dark:bg-gray-700/50">
                                        <tr>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Criterio</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">No Cumplimientos</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">% Incumplimiento</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Tendencia</th>
                                        </tr>
                                    </thead>
                                    <tbody id="reporte-criterios-tbody" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                        <tr>
                                            <td colspan="4" class="px-4 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                                                Genere un reporte para ver los datos
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Opciones de Exportación -->
                        <div class="flex justify-end mt-6">
                            <button id="exportar-reporte-btn" class="inline-flex items-center px-4 py-2 ml-3 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                                    <polyline points="14 2 14 8 20 8" />
                                    <path d="M12 18v-6" />
                                    <path d="m9 15 3 3 3-3" />
                                </svg>
                                Exportar a Excel
                            </button>
                            <button id="imprimir-reporte-btn" class="inline-flex items-center px-4 py-2 ml-3 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="6 9 6 2 18 2 18 9" />
                                    <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2" />
                                    <rect width="12" height="8" x="6" y="14" />
                                </svg>
                                Imprimir Reporte
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal de Detalles -->
    <div id="detalle-modal" class="fixed inset-0 bg-gray-600 dark:bg-gray-900 bg-opacity-75 dark:bg-opacity-75 overflow-y-auto h-full w-full z-50 hidden print:hidden flex items-center justify-center p-4 transition-all duration-300">
        <div class="relative w-full max-w-3xl max-h-[90vh] bg-white dark:bg-gray-800 rounded-lg shadow-xl flex flex-col transition-all duration-300">
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 rounded-t-lg z-10">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">Detalle de Inspección</h3>
                <button id="close-modal-button" class="text-gray-400 bg-transparent hover:bg-gray-200 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100 rounded-lg text-sm p-1.5 inline-flex items-center transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M18 6 6 18" />
                        <path d="m6 6 12 12" />
                    </svg>
                </button>
            </div>
            <div class="overflow-y-auto p-5 flex-grow">
                <div id="modal-imprimir">
                    <div class="space-y-5" id="modal-content">
                        <div class="flex flex-col items-center justify-center py-6">
                            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-primary-600 dark:border-primary-400 mb-3"></div>
                            <p class="text-gray-500 dark:text-gray-400">Cargando detalles...</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-buttons p-4 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-2 sticky bottom-0 bg-white dark:bg-gray-800 rounded-b-lg">
                <button id="print-modal-button" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="6 9 6 2 18 2 18 9" />
                        <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2" />
                        <rect width="12" height="8" x="6" y="14" />
                    </svg>
                    Imprimir
                </button>
                <button id="close-modal-button-bottom" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M18 6 6 18" />
                        <path d="m6 6 12 12" />
                    </svg>
                    Cerrar
                </button>
            </div>
        </div>
    </div>

    <script>
        // --- Variables Globales de Estado (No DOM) ---
        let currentView = 'dashboard';
        let criteriosData = [];
        let busesData = [];
        let usuariosData = [];
        let terminalesData = [];
        let inspeccionesData = []; // Datos actuales mostrados en la tabla/dashboard
        let inspeccionesChartInstance = null;
        let tendenciaChartInstance = null;
        let terminalesChartInstance = null;
        let reporteTendenciaChartInstance = null;
        let reporteCriteriosChartInstance = null;
        let supabaseClient = null;
        let isDarkMode = false;
        let lastNotificationId = 0;
        let notificationsCount = 0;
        let currentPage = 1;
        let pageSize = 10;
        let totalPages = 1;
        
        // Paletas de colores
        const chartColors = {
            light: {
                estados: ['rgb(239, 68, 68)', 'rgb(245, 158, 11)', 'rgb(16, 185, 129)'],
                terminales: [
                    'rgba(59, 130, 246, 0.8)', 'rgba(16, 185, 129, 0.8)', 'rgba(245, 158, 11, 0.8)',
                    'rgba(139, 92, 246, 0.8)', 'rgba(236, 72, 153, 0.8)', 'rgba(14, 165, 233, 0.8)',
                    'rgba(20, 184, 166, 0.8)', 'rgba(217, 119, 6, 0.8)', 'rgba(168, 85, 247, 0.8)'
                ],
                grid: 'rgba(229, 231, 235, 0.5)',
                text: '#374151',
                border: '#e5e7eb'
            },
            dark: {
                estados: ['rgb(239, 68, 68)', 'rgb(245, 158, 11)', 'rgb(16, 185, 129)'],
                terminales: [
                    'rgba(96, 165, 250, 0.8)', 'rgba(52, 211, 153, 0.8)', 'rgba(251, 191, 36, 0.8)',
                    'rgba(167, 139, 250, 0.8)', 'rgba(244, 114, 182, 0.8)', 'rgba(56, 189, 248, 0.8)',
                    'rgba(45, 212, 191, 0.8)', 'rgba(234, 179, 8, 0.8)', 'rgba(192, 132, 252, 0.8)'
                ],
                grid: 'rgba(75, 85, 99, 0.3)',
                text: '#e5e7eb',
                border: '#4b5563'
            }
        };

        // --- Variables Globales para Selectores de DOM ---
        let views = {};
        let navLinks = null;
        let viewTitle = null;
        let registroForm = null;
        let ppuSelect = null;
        let ppuErrorContainer = null;
        let terminalSelect = null;
        let terminalErrorContainer = null;
        let criteriosContainer = null;
        let inspeccionesTbody = null;
        let listaErrorContainer = null;
        let formMessage = null;
        let submitButton = null;
        let detalleModal = null;
        let modalContent = null;
        let closeModalButton = null;
        let closeModalButtonBottom = null;
        let printModalButton = null;
        let menuButton = null;
        let sidebar = null;
        let sidebarOverlay = null;
        let supervisorSelect = null;
        let cleanerSelect = null;
        let searchPpuInput = null;
        let filterTerminalSelect = null;
        let filterEstadoSelect = null;
        let filterFechaInicioInput = null;
        let filterFechaFinInput = null;
        let applyFiltersButton = null;
        let kpiHoy = null;
        let kpiPendientes = null;
        let kpiRevision = null;
        let kpiSolucionadas = null;
        let kpiHoyChange = null;
        let kpiPendientesBadge = null;
        let kpiRevisionChange = null;
        let kpiSolucionadasChange = null;
        let chartCanvas = null;
        let tendenciaCanvas = null;
        let terminalesCanvas = null;
        let dashboardFilterTerminalSelect = null;
        let dashboardDateRangeSelect = null;
        let themeToggleButton = null;
        let themeToggleText = null;
        let themeToggleDarkIcon = null;
        let themeToggleLightIcon = null;
        let notificationButton = null;
        let notificationCount = null;
        let alertsContainer = null;
        let quickRegisterButton = null;
        let criteriosCompletados = null;
        let recentInspections = null;
        let paginationInfo = null;
        let paginationStart = null;
        let paginationEnd = null;
        let paginationTotal = null;
        let paginationPrev = null;
        let paginationNext = null;
        let paginationButtons = null;
        let reporteTerminalSelect = null;
        let reportePeriodoSelect = null;
        let reporteTipoSelect = null;
        let reporteFechaInicioInput = null;
        let reporteFechaFinInput = null;
        let fechasPersonalizadas = null;
        let generarReporteBtn = null;
        let exportarReporteBtn = null;
        let imprimirReporteBtn = null;
        let reporteTendenciaChart = null;
        let reporteCriteriosChart = null;
        let reporteTotal = null;
        let reporteTasaCumplimiento = null;
        let reporteTiempoPromedio = null;
        let reporteCriteriosTbody = null;
        let exportButton = null;

        // --- Funciones Auxiliares ---
        function showView(viewId) {
            if (!views.dashboard) {
                console.error("showView: Selectores de vista no listos.");
                return;
            }

            Object.values(views).forEach(view => {
                if (view) view.classList.add('hidden');
            });

            if (views[viewId]) {
                views[viewId].classList.remove('hidden');
                let titleText = viewId.charAt(0).toUpperCase() + viewId.slice(1);
                
                if (viewId === 'lista') titleText = 'Ver Inspecciones';
                if (viewId === 'registrar') titleText = 'Registrar Inspección';
                if (viewId === 'reportes') titleText = 'Reportes y Análisis';
                
                if (viewTitle) viewTitle.textContent = titleText;
                currentView = viewId;

                // Cargar datos específicos si supabase está listo y los selectores también
                if (supabaseClient && document.readyState === 'complete') {
                    switch (viewId) {
                        case 'lista':
                            loadTerminalesParaFiltro();
                            loadInspecciones(getCurrentFilters()); // Cargar con filtros actuales
                            break;
                        case 'registrar':
                            loadBusesParaFormulario();
                            loadCriteriosParaFormulario();
                            loadUsuariosParaFormulario();
                            loadTerminalesParaFormulario();
                            break;
                        case 'dashboard':
                            loadTerminalesParaFiltroDashboard();
                            loadDashboardData();
                            break;
                        case 'reportes':
                            loadTerminalesParaFiltroReporte();
                            initReportesView();
                            break;
                    }
                }

                // Cerrar sidebar en móvil
                if (window.innerWidth < 768 && sidebar && sidebarOverlay) {
                    sidebar.classList.remove('open');
                    sidebarOverlay.classList.add('hidden');
                }
                
                // Actualizar navegación activa
                if (navLinks) {
                    navLinks.forEach(link => {
                        const linkViewId = link.getAttribute('data-view');
                        if (linkViewId === viewId) {
                            link.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-primary-600', 'dark:text-primary-400');
                        } else {
                            link.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-primary-600', 'dark:text-primary-400');
                        }
                    });
                }
            } else {
                console.error(`Vista no encontrada: ${viewId}`);
                showView('dashboard');
            }
        }

        function showLoadingMessage(container, message = "Cargando...") {
            if (container) {
                container.innerHTML = `
                    <div class="flex flex-col items-center justify-center py-6">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 dark:border-primary-400 mb-3"></div>
                        <p class="text-gray-500 dark:text-gray-400">${message}</p>
                    </div>`;
            } else {
                console.warn("showLoadingMessage: Contenedor no encontrado.");
            }
        }

        function showErrorMessage(element, message) {
            if (element) {
                element.textContent = message;
                element.className = 'mt-1 text-sm text-red-600 dark:text-red-400 font-medium';
            } else {
                console.warn("showErrorMessage: Elemento no encontrado:", message);
            }
            console.error(message);
        }

        function showSuccessMessage(element, message) {
            if (element) {
                element.textContent = message;
                element.className = 'mt-3 text-sm text-green-600 dark:text-green-400 font-medium';
            } else {
                console.warn("showSuccessMessage: Elemento no encontrado:", message);
            }
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const options = { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', hour12: false };
            try {
                const date = new Date(dateString); // Asume que viene en formato ISO o similar parseable
                return date.toLocaleString('es-CL', options); // Usar locale CL
            } catch (error) {
                console.warn("Error formatting date:", dateString, error);
                return dateString;
            }
        }

        function formatShortDate(dateString) {
            if (!dateString) return 'N/A';
            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
            try {
                const date = new Date(dateString);
                return date.toLocaleString('es-CL', options);
            } catch (error) {
                console.warn("Error formatting short date:", dateString, error);
                return dateString;
            }
        }

        function getStatusBadge(status) {
            let badgeClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
            if (status === 'Pendiente') badgeClass = 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';
            else if (status === 'En Revisión') badgeClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400';
            else if (status === 'Solucionado') badgeClass = 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';
            return `<span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${badgeClass}">${status || 'Desconocido'}</span>`;
        }

        function showNotification(message, type = 'info', duration = 5000) {
            if (!alertsContainer) return;

            const id = 'alert-' + (++lastNotificationId);
            
            let bgColor, textColor, iconColor, borderColor, icon;
            
            if (isDarkMode) {
                if (type === 'success') {
                    bgColor = 'bg-green-900/30';
                    textColor = 'text-green-200';
                    iconColor = 'text-green-400';
                    borderColor = 'border-green-800';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>`;
                } else if (type === 'error') {
                    bgColor = 'bg-red-900/30';
                    textColor = 'text-red-200';
                    iconColor = 'text-red-400';
                    borderColor = 'border-red-800';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>`;
                } else if (type === 'warning') {
                    bgColor = 'bg-yellow-900/30';
                    textColor = 'text-yellow-200';
                    iconColor = 'text-yellow-400';
                    borderColor = 'border-yellow-800';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>`;
                } else {
                    bgColor = 'bg-blue-900/30';
                    textColor = 'text-blue-200';
                    iconColor = 'text-blue-400';
                    borderColor = 'border-blue-800';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>`;
                }
            } else {
                if (type === 'success') {
                    bgColor = 'bg-green-50';
                    textColor = 'text-green-800';
                    iconColor = 'text-green-500';
                    borderColor = 'border-green-200';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>`;
                } else if (type === 'error') {
                    bgColor = 'bg-red-50';
                    textColor = 'text-red-800';
                    iconColor = 'text-red-500';
                    borderColor = 'border-red-200';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>`;
                } else if (type === 'warning') {
                    bgColor = 'bg-yellow-50';
                    textColor = 'text-yellow-800';
                    iconColor = 'text-yellow-500';
                    borderColor = 'border-yellow-200';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>`;
                } else {
                    bgColor = 'bg-blue-50';
                    textColor = 'text-blue-800';
                    iconColor = 'text-blue-500';
                    borderColor = 'border-blue-200';
                    icon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>`;
                }
            }

            const alertEl = document.createElement('div');
            alertEl.id = id;
            alertEl.className = `${bgColor} border-l-4 ${borderColor} p-4 rounded-md shadow-md slide-in-right pointer-events-auto`;
            alertEl.innerHTML = `
                <div class="flex items-start">
                    <div class="flex-shrink-0 ${iconColor}">
                        ${icon}
                    </div>
                    <div class="ml-3 w-0 flex-1 pt-0.5">
                        <p class="text-sm font-medium ${textColor}">${message}</p>
                    </div>
                    <div class="ml-4 flex-shrink-0 flex">
                        <button type="button" class="inline-flex ${textColor} focus:outline-none focus:text-gray-500" onclick="document.getElementById('${id}').remove()">
                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            `;

            alertsContainer.appendChild(alertEl);

            // Incrementar contador de notificaciones
            incrementNotificationCount();

            // Auto-remover después de la duración
            setTimeout(() => {
                const alertToRemove = document.getElementById(id);
                if (alertToRemove) {
                    alertToRemove.style.opacity = '0';
                    alertToRemove.style.transform = 'translateX(100%)';
                    alertToRemove.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                    
                    setTimeout(() => {
                        if (alertToRemove && alertToRemove.parentNode) {
                            alertToRemove.parentNode.removeChild(alertToRemove);
                        }
                    }, 500);
                }
            }, duration);
        }

        function incrementNotificationCount() {
            notificationsCount++;
            if (notificationCount) {
                notificationCount.textContent = notificationsCount;
                notificationCount.classList.remove('hidden');
            }
        }

        function resetNotificationCount() {
            notificationsCount = 0;
            if (notificationCount) {
                notificationCount.textContent = '0';
                notificationCount.classList.add('hidden');
            }
        }

        function toggleDarkMode() {
            isDarkMode = !isDarkMode;
            const htmlElement = document.documentElement;
            
            if (isDarkMode) {
                htmlElement.classList.remove('light');
                htmlElement.classList.add('dark');
                if (themeToggleText) themeToggleText.textContent = 'Cambiar a Modo Claro';
                if (themeToggleDarkIcon) themeToggleDarkIcon.classList.remove('hidden');
                if (themeToggleLightIcon) themeToggleLightIcon.classList.add('hidden');
            } else {
                htmlElement.classList.remove('dark');
                htmlElement.classList.add('light');
                if (themeToggleText) themeToggleText.textContent = 'Cambiar a Modo Oscuro';
                if (themeToggleDarkIcon) themeToggleDarkIcon.classList.add('hidden');
                if (themeToggleLightIcon) themeToggleLightIcon.classList.remove('hidden');
            }
            
            // Actualizar gráficos si existen
            updateAllCharts();
        }

        function updateAllCharts() {
            // Solo actualizar si los gráficos ya están creados
            if (inspeccionesChartInstance) {
                updateChartColors(inspeccionesChartInstance);
            }
            if (tendenciaChartInstance) {
                updateChartColors(tendenciaChartInstance);
            }
            if (terminalesChartInstance) {
                updateChartColors(terminalesChartInstance);
            }
            if (reporteTendenciaChartInstance) {
                updateChartColors(reporteTendenciaChartInstance);
            }
            if (reporteCriteriosChartInstance) {
                updateChartColors(reporteCriteriosChartInstance);
            }
        }

        function updateChartColors(chartInstance) {
            const colorScheme = isDarkMode ? chartColors.dark : chartColors.light;
            
            // Actualizar opciones generales
            if (chartInstance.options.scales && chartInstance.options.scales.x) {
                chartInstance.options.scales.x.grid.color = colorScheme.grid;
                chartInstance.options.scales.x.ticks.color = colorScheme.text;
            }
            
            if (chartInstance.options.scales && chartInstance.options.scales.y) {
                chartInstance.options.scales.y.grid.color = colorScheme.grid;
                chartInstance.options.scales.y.ticks.color = colorScheme.text;
            }
            
            // Actualizar leyenda
            if (chartInstance.options.plugins && chartInstance.options.plugins.legend) {
                chartInstance.options.plugins.legend.labels.color = colorScheme.text;
            }
            
            // Aplicar cambios
            chartInstance.update();
        }

        // Función para generar color aleatorio (usado para terminales adicionales)
        function getRandomColor() {
            const r = Math.floor(Math.random() * 200) + 55;
            const g = Math.floor(Math.random() * 200) + 55;
            const b = Math.floor(Math.random() * 200) + 55;
            return `rgba(${r}, ${g}, ${b}, 0.8)`;
        }

        function calculateDateRange(range) {
            const now = new Date();
            let startDate = new Date();
            
            if (range === 'today') {
                startDate.setHours(0, 0, 0, 0);
            } else if (range === 'week') {
                startDate.setDate(now.getDate() - 7);
            } else if (range === 'month') {
                startDate.setMonth(now.getMonth() - 1);
            } else if (range === 'quarter') {
                startDate.setMonth(now.getMonth() - 3);
            } else if (range === 'year') {
                startDate.setFullYear(now.getFullYear() - 1);
            } else {
                // Valor predeterminado: todo
                startDate = new Date(2000, 0, 1);
            }
            
            return {
                start: startDate.toISOString(),
                end: now.toISOString()
            };
        }
        // --- FIN Funciones Auxiliares ---


        // --- Carga de Datos Comunes ---
        async function loadInitialData() {
            if (!supabaseClient) {
                console.error("Supabase client no inicializado en loadInitialData.");
                return;
            }
            if (!views.dashboard || !kpiHoy) {
                console.error("Selectores DOM no inicializados en loadInitialData.");
                return;
            }

            // Cargar datos comunes en paralelo
            await Promise.all([
                loadTerminales(), // Carga principal de terminales
                loadBusesParaFormulario(),
                loadCriteriosParaFormulario(),
                loadUsuariosParaFormulario()
            ]);

            // Cargar datos específicos del dashboard y filtros que dependen de terminales
            await loadTerminalesParaFiltro();
            await loadTerminalesParaFiltroDashboard();
            await loadTerminalesParaFiltroReporte();
            await loadDashboardData();

            // Mostrar vista inicial
            showView(currentView);

            // Actualizar eventos de cambio en período
            if (dashboardDateRangeSelect) {
                dashboardDateRangeSelect.addEventListener('change', () => {
                    loadDashboardData();
                });
            }

            // Mensaje de bienvenida
            showNotification('¡Bienvenido al Sistema de Control de Fiscalizaciones!', 'info', 5000);
        }

        async function loadTerminales() {
            if (terminalesData.length > 0) return terminalesData;
            try {
                console.log("Cargando terminales...");
                const { data, error } = await supabaseClient.from('InspeccionICA_terminales').select('id, nombre').order('nombre');
                if (error) throw error;
                terminalesData = data;
                console.log("Terminales cargados:", terminalesData.length);
                return terminalesData;
            } catch (error) {
                console.error(`Error al cargar terminales: ${error.message}`);
                showNotification(`Error al cargar terminales: ${error.message}`, 'error');
                return [];
            }
        }

        async function populateTerminalSelect(selectElement, errorContainer, includeAllOption = false, defaultText = 'Seleccione...') {
            if (!selectElement) return;
            // Evitar recarga si ya tiene opciones reales
            if (selectElement.options.length > 1 && selectElement.options[1].value !== '') return;

            selectElement.innerHTML = `<option value="">Cargando...</option>`;
            selectElement.disabled = true;
            if (errorContainer) errorContainer.innerHTML = '';

            const terminales = await loadTerminales(); // Asegura que los datos base estén cargados

            if (terminales.length === 0) {
                selectElement.innerHTML = `<option value="">No hay terminales</option>`;
                if (errorContainer) showErrorMessage(errorContainer, 'No se encontraron terminales.');
            } else {
                selectElement.innerHTML = includeAllOption ? `<option value="">${defaultText}</option>` : `<option value="">${defaultText}</option>`;
                terminales.forEach(terminal => {
                    selectElement.appendChild(new Option(terminal.nombre, terminal.id));
                });
                selectElement.disabled = false;
            }
        }

        async function loadTerminalesParaFormulario() {
            await populateTerminalSelect(terminalSelect, terminalErrorContainer, false, 'Seleccione Terminal');
        }

        async function loadTerminalesParaFiltro() {
            await populateTerminalSelect(filterTerminalSelect, null, true, 'Todos los Terminales');
        }

        async function loadTerminalesParaFiltroDashboard() {
            await populateTerminalSelect(dashboardFilterTerminalSelect, null, true, 'Todos');
            // Añadir listener solo una vez
            if (dashboardFilterTerminalSelect && !dashboardFilterTerminalSelect.dataset.listenerAdded) {
                dashboardFilterTerminalSelect.addEventListener('change', () => {
                    loadDashboardData();
                });
                dashboardFilterTerminalSelect.dataset.listenerAdded = 'true';
            }
        }

        async function loadTerminalesParaFiltroReporte() {
            await populateTerminalSelect(reporteTerminalSelect, null, true, 'Todos los terminales');
        }

        // Carga de Buses, Criterios, Usuarios
        async function loadBusesParaFormulario() {
            if (!ppuSelect || !ppuErrorContainer) return;
            if (busesData.length > 0 && ppuSelect.options.length > 1) return;
            
            showLoadingMessage(ppuErrorContainer, 'Cargando buses...');
            ppuSelect.innerHTML = '<option value="">Cargando...</option>';
            ppuSelect.disabled = true;
            
            try {
                const { data, error } = await supabaseClient.from('InspeccionICA_buses').select('ppu').order('ppu');
                if (error) throw error;
                
                busesData = data;
                ppuSelect.innerHTML = '<option value="">Seleccione PPU</option>';
                
                if (data.length === 0) {
                    ppuSelect.innerHTML = '<option value="">No hay buses</option>';
                    showErrorMessage(ppuErrorContainer, 'No hay buses disponibles.');
                } else {
                    data.forEach(bus => {
                        ppuSelect.appendChild(new Option(bus.ppu, bus.ppu));
                    });
                    ppuErrorContainer.innerHTML = '';
                }
                
                ppuSelect.disabled = false;
            } catch (error) {
                console.error(`Error al cargar buses: ${error.message}`);
                ppuSelect.innerHTML = '<option value="">Error</option>';
                ppuSelect.disabled = true;
                showErrorMessage(ppuErrorContainer, `Error: ${error.message}`);
                showNotification(`Error al cargar buses: ${error.message}`, 'error');
            }
        }

        async function loadCriteriosParaFormulario() {
            if (!criteriosContainer || !formMessage) return;
            if (criteriosData.length > 0 && criteriosContainer.children.length > 1) return;
            
            showLoadingMessage(criteriosContainer, 'Cargando criterios...');
            
            try {
                const { data, error } = await supabaseClient
                    .from('InspeccionICA_criterios')
                    .select('id, descripcion, numero_condicion')
                    .eq('codigo_norma', 'ICA')
                    .eq('codigo_articulo', 'A18')
                    .eq('activo', true)
                    .order('numero_condicion');
                
                if (error) throw error;
                
                criteriosData = data;
                criteriosContainer.innerHTML = '';
                
                if (data.length === 0) {
                    criteriosContainer.innerHTML = '<p class="text-red-600 dark:text-red-400 p-4">Error: No hay criterios activos.</p>';
                    return;
                }
                
                data.forEach(criterio => {
                    const div = document.createElement('div');
                    div.className = 'border border-gray-200 dark:border-gray-700 p-4 rounded-lg bg-white dark:bg-gray-800 shadow-sm transition-all hover:shadow-md';
                    
                    const inputIdBase = `criterio_${criterio.id}`;
                    const cumpleId = `${inputIdBase}_true`;
                    const noCumpleId = `${inputIdBase}_false`;
                    
                    div.innerHTML = `
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                            Condición #${criterio.numero_condicion}: ${criterio.descripcion}
                        </label>
                        <div class="flex items-center space-x-6 mb-3">
                            <label for="${cumpleId}" class="flex items-center cursor-pointer">
                                <input type="radio" id="${cumpleId}" name="${inputIdBase}" value="true" required 
                                    class="focus:ring-primary-500 h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-600 dark:bg-gray-700">
                                <span class="ml-2 text-sm text-green-700 dark:text-green-400 font-medium">Cumple</span>
                            </label>
                            <label for="${noCumpleId}" class="flex items-center cursor-pointer">
                                <input type="radio" id="${noCumpleId}" name="${inputIdBase}" value="false" required 
                                    class="focus:ring-red-500 h-4 w-4 text-red-600 border-gray-300 dark:border-gray-600 dark:bg-gray-700">
                                <span class="ml-2 text-sm text-red-700 dark:text-red-400 font-medium">No Cumple</span>
                            </label>
                        </div>
                        <textarea name="observacion_${criterio.id}" rows="2" placeholder="Observación (opcional)" 
                            class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"></textarea>
                    `;
                    
                    criteriosContainer.appendChild(div);
                    
                    // Agregar listeners para actualizar el contador de criterios completados
                    const radioButtons = div.querySelectorAll('input[type="radio"]');
                    radioButtons.forEach(radio => {
                        radio.addEventListener('change', updateCriteriosCompletados);
                    });
                });
                
                // Inicializar contador
                updateCriteriosCompletados();
                
            } catch (error) {
                console.error(`Error al cargar criterios: ${error.message}`);
                criteriosContainer.innerHTML = '<p class="text-red-600 dark:text-red-400 p-4">Error al cargar criterios.</p>';
                showErrorMessage(formMessage, `Error al cargar criterios: ${error.message}`);
                showNotification(`Error al cargar criterios: ${error.message}`, 'error');
            }
        }

        function updateCriteriosCompletados() {
            if (!criteriosCompletados) return;
            
            const totalCriterios = criteriosData.length;
            let completados = 0;
            
            criteriosData.forEach(criterio => {
                const radioName = `criterio_${criterio.id}`;
                const radios = document.querySelectorAll(`input[name="${radioName}"]:checked`);
                if (radios.length > 0) {
                    completados++;
                }
            });
            
            criteriosCompletados.textContent = `${completados}/${totalCriterios}`;
            
            // Cambiar color según el progreso
            const progressPercentage = (completados / totalCriterios) * 100;
            
            if (progressPercentage === 100) {
                criteriosCompletados.className = 'font-medium text-green-600 dark:text-green-400';
            } else if (progressPercentage > 50) {
                criteriosCompletados.className = 'font-medium text-primary-600 dark:text-primary-400';
            } else if (progressPercentage > 0) {
                criteriosCompletados.className = 'font-medium text-yellow-600 dark:text-yellow-400';
            } else {
                criteriosCompletados.className = 'font-medium text-gray-600 dark:text-gray-400';
            }
        }

        async function loadUsuariosParaFormulario() {
            if (!supervisorSelect || !cleanerSelect || !formMessage) return;
            if (usuariosData.length > 0 && supervisorSelect.options.length > 1) return;
            
            supervisorSelect.innerHTML = '<option value="">Cargando...</option>';
            cleanerSelect.innerHTML = '<option value="">Cargando...</option>';
            supervisorSelect.disabled = true;
            cleanerSelect.disabled = true;
            
            try {
                const { data, error } = await supabaseClient.from('InspeccionICA_usuarios').select('id, nombre_completo, rol');
                
                if (error && error.message.includes('relation "InspeccionICA_usuarios" does not exist')) {
                    console.warn("Tabla Usuarios no encontrada.");
                    supervisorSelect.innerHTML = '<option value="">N/A</option>';
                    cleanerSelect.innerHTML = '<option value="">N/A</option>';
                    usuariosData = [];
                    return;
                } else if (error) {
                    throw error;
                }
                
                usuariosData = data;
                supervisorSelect.innerHTML = '<option value="">Sin asignar</option>';
                cleanerSelect.innerHTML = '<option value="">Sin asignar</option>';
                supervisorSelect.disabled = false;
                cleanerSelect.disabled = false;
                
                data.forEach(user => {
                    const option = new Option(`${user.nombre_completo} (${user.rol})`, user.id);
                    if (user.rol === 'Supervisor') supervisorSelect.appendChild(option.cloneNode(true));
                    if (user.rol === 'Cleaner') cleanerSelect.appendChild(option.cloneNode(true));
                });
            } catch (error) {
                console.error(`Error al cargar usuarios: ${error.message}`);
                supervisorSelect.innerHTML = '<option value="">Error</option>';
                cleanerSelect.innerHTML = '<option value="">Error</option>';
                supervisorSelect.disabled = true;
                cleanerSelect.disabled = true;
                showErrorMessage(formMessage, `Error al cargar usuarios: ${error.message}`);
                showNotification(`Error al cargar usuarios: ${error.message}`, 'error');
            }
        }
        // --- FIN Cargas ---


        // --- Lógica Formulario Registro ---
        function handleRegistroSubmit(event) {
            event.preventDefault();
            
            if (!registroForm || !submitButton || !formMessage || !supabaseClient || !terminalSelect) {
                console.error("handleRegistroSubmit: Faltan elementos.");
                return;
            }
            
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <div class="animate-spin inline-block w-4 h-4 border-[2px] border-current border-t-transparent text-white rounded-full mr-2" role="status" aria-label="loading"></div>
                Guardando...`;
            formMessage.textContent = '';
            
            const formData = new FormData(registroForm);
            
            // Validaciones
            if (!formData.get('terminal') || !formData.get('ppu') || !formData.get('fiscalizador') || !formData.get('registrador')) {
                showErrorMessage(formMessage, 'Complete todos los campos requeridos.');
                submitButton.disabled = false;
                submitButton.innerHTML = 'Guardar Inspección';
                return;
            }
            
            // Validar que todos los criterios tengan una opción seleccionada
            let criteriosFaltantes = false;
            criteriosData.forEach(c => {
                if (formData.get(`criterio_${c.id}`) === null) {
                    criteriosFaltantes = true;
                }
            });
            
            if (criteriosFaltantes) {
                showErrorMessage(formMessage, 'Debe completar todos los criterios de inspección.');
                submitButton.disabled = false;
                submitButton.innerHTML = 'Guardar Inspección';
                return;
            }
            
            // Preparar datos para guardar
            const inspeccionData = {
                bus_ppu: formData.get('ppu'),
                terminal_id: formData.get('terminal'),
                nombre_fiscalizador: formData.get('fiscalizador'),
                nombre_registrador: formData.get('registrador'),
                estado_general: formData.get('estado_inicial'),
                observaciones_generales: formData.get('observaciones_generales') || null,
                supervisor_asignado_id: formData.get('supervisor') || null,
                cleaner_asignado_id: formData.get('cleaner') || null,
                fecha_ultima_actualizacion_estado: new Date().toISOString()
            };
            
            const detallesData = criteriosData.map(c => ({
                criterio_id: c.id,
                cumple: formData.get(`criterio_${c.id}`) === 'true',
                observacion_criterio: formData.get(`observacion_${c.id}`) || null
            }));
            
            (async () => {
                try {
                    // Insertar inspección principal
                    const { data: iResult, error: iError } = await supabaseClient
                        .from('InspeccionICA_inspecciones')
                        .insert([inspeccionData])
                        .select('id')
                        .single();
                    
                    if (iError) throw iError;
                    
                    const newId = iResult.id;
                    
                    // Insertar detalles
                    const detInsert = detallesData.map(d => ({ ...d, inspeccion_id: newId }));
                    const { error: dError } = await supabaseClient
                        .from('InspeccionICA_detalles_inspeccion')
                        .insert(detInsert);
                    
                    if (dError) {
                        console.warn('Error al guardar detalles, borrando inspección...');
                        await supabaseClient.from('InspeccionICA_inspecciones').delete().eq('id', newId);
                        throw dError;
                    }
                    
                    // Éxito - Mostrar mensaje y resetear formulario
                    showSuccessMessage(formMessage, '¡Inspección registrada correctamente!');
                    showNotification(`Inspección para el bus ${inspeccionData.bus_ppu} registrada exitosamente.`, 'success');
                    registroForm.reset();
                    
                    // Actualizar vistas si corresponde
                    if (currentView === 'dashboard') loadDashboardData();
                    if (currentView === 'lista') loadInspecciones(getCurrentFilters());
                    
                    // Reiniciar contador de criterios completados
                    updateCriteriosCompletados();
                    
                } catch (error) {
                    showErrorMessage(formMessage, `Error al guardar: ${error.message}`);
                    showNotification(`Error al guardar inspección: ${error.message}`, 'error');
                    console.error(error);
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z" />
                            <polyline points="17 21 17 13 7 13 7 21" />
                            <polyline points="7 3 7 8 15 8" />
                        </svg>
                        Guardar Inspección`;
                }
            })();
        }
        // --- FIN Registro ---


        // --- Lógica Lista Inspecciones (con delegación de eventos) ---
        async function loadInspecciones(filters = {}, page = 1) {
            if (!inspeccionesTbody || !supabaseClient || !listaErrorContainer) {
                console.error("loadInspecciones: Faltan elementos.");
                return;
            }
            
            currentPage = page;
            
            showLoadingMessage(inspeccionesTbody, 'Cargando inspecciones...');
            listaErrorContainer.innerHTML = ''; // Limpiar errores previos

            try {
                // Primero hacemos una consulta para contar el total de registros
                let countQuery = supabaseClient.from('InspeccionICA_inspecciones').select('id', { count: 'exact' });
                
                // Aplicar filtros al conteo
                if (filters.ppu) countQuery = countQuery.ilike('bus_ppu', `%${filters.ppu}%`);
                if (filters.estado) countQuery = countQuery.eq('estado_general', filters.estado);
                if (filters.terminal) countQuery = countQuery.eq('terminal_id', filters.terminal);
                if (filters.fechaInicio) countQuery = countQuery.gte('fecha_hora_inspeccion', filters.fechaInicio + 'T00:00:00Z');
                if (filters.fechaFin) countQuery = countQuery.lte('fecha_hora_inspeccion', filters.fechaFin + 'T23:59:59Z');
                
                const { count, error: countError } = await countQuery;
                
                if (countError) throw countError;
                
                // Calcular paginación
                totalPages = Math.ceil(count / pageSize);
                
                // Actualizar información de paginación
                if (paginationInfo && paginationStart && paginationEnd && paginationTotal) {
                    const start = (currentPage - 1) * pageSize + 1;
                    const end = Math.min(start + pageSize - 1, count);
                    
                    paginationStart.textContent = start;
                    paginationEnd.textContent = end;
                    paginationTotal.textContent = count;
                    
                    // Ocultar o mostrar según si hay resultados
                    paginationInfo.style.display = count > 0 ? 'block' : 'none';
                }
                
                // Consulta para la página actual
                let query = supabaseClient.from('InspeccionICA_inspecciones')
                    .select(`id, bus_ppu, fecha_hora_inspeccion, nombre_fiscalizador, estado_general, terminal:InspeccionICA_terminales(nombre)`)
                    .order('fecha_hora_inspeccion', { ascending: false })
                    .range((currentPage - 1) * pageSize, currentPage * pageSize - 1);
                
                // Aplicar filtros
                if (filters.ppu) query = query.ilike('bus_ppu', `%${filters.ppu}%`);
                if (filters.estado) query = query.eq('estado_general', filters.estado);
                if (filters.terminal) query = query.eq('terminal_id', filters.terminal);
                if (filters.fechaInicio) query = query.gte('fecha_hora_inspeccion', filters.fechaInicio + 'T00:00:00Z');
                if (filters.fechaFin) query = query.lte('fecha_hora_inspeccion', filters.fechaFin + 'T23:59:59Z');

                const { data, error } = await query;
                
                if (error) throw error;
                
                inspeccionesData = data;
                inspeccionesTbody.innerHTML = ''; // Limpiar tabla

                if (data.length === 0) {
                    inspeccionesTbody.innerHTML = `
                        <tr>
                            <td colspan="6" class="px-4 py-10 text-center text-gray-500 dark:text-gray-400">
                                <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <p class="mt-2 text-lg font-semibold">No se encontraron inspecciones.</p>
                                <p class="text-sm">Pruebe a utilizar otros filtros o registre una nueva inspección.</p>
                            </td>
                        </tr>`;
                    
                    // Actualizar botones de paginación
                    updatePaginationButtons(0);
                    return;
                }

                data.forEach(inspeccion => {
                    const tr = document.createElement('tr');
                    tr.className = 'hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-colors';
                    tr.setAttribute('data-inspeccion-id', inspeccion.id);
                    
                    tr.innerHTML = `
                        <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${inspeccion.bus_ppu}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${formatDate(inspeccion.fecha_hora_inspeccion)}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${inspeccion.terminal?.nombre || 'N/A'}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${inspeccion.nombre_fiscalizador}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 status-cell">
                            ${getStatusBadge(inspeccion.estado_general)}
                        </td>
                        <td class="px-4 py-3 whitespace-nowrap text-right text-sm font-medium">
                            <div class="flex justify-end items-center space-x-2">
                                <button data-id="${inspeccion.id}" class="view-details-button inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded 
                                    text-primary-700 bg-primary-100 hover:bg-primary-200 dark:bg-primary-900/30 dark:text-primary-400 
                                    dark:hover:bg-primary-800/50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" 
                                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
                                        <circle cx="12" cy="12" r="3" />
                                    </svg>
                                    Ver
                                </button>
                                <div class="status-dropdown relative">
                                    <button class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 dark:border-gray-600 text-xs font-medium rounded 
                                        text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 
                                        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" 
                                            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M12 20h9" />
                                            <path d="M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z" />
                                        </svg>
                                        Estado
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 24 24" fill="none" 
                                            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="m6 9 6 6 6-6" />
                                        </svg>
                                    </button>
                                    <div class="status-options bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-lg">
                                        <a href="#" class="status-change-link flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700
                                            ${inspeccion.estado_general === 'Pendiente' ? 'font-bold bg-gray-100 dark:bg-gray-700' : ''}" 
                                            data-id="${inspeccion.id}" data-status="Pendiente">
                                            <span class="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                                            Pendiente
                                        </a>
                                        <a href="#" class="status-change-link flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700
                                            ${inspeccion.estado_general === 'En Revisión' ? 'font-bold bg-gray-100 dark:bg-gray-700' : ''}" 
                                            data-id="${inspeccion.id}" data-status="En Revisión">
                                            <span class="w-2 h-2 bg-yellow-500 rounded-full mr-2"></span>
                                            En Revisión
                                        </a>
                                        <a href="#" class="status-change-link flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700
                                            ${inspeccion.estado_general === 'Solucionado' ? 'font-bold bg-gray-100 dark:bg-gray-700' : ''}" 
                                            data-id="${inspeccion.id}" data-status="Solucionado">
                                            <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                                            Solucionado
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </td>`;
                    
                    inspeccionesTbody.appendChild(tr);
                });

                // Actualizar botones de paginación
                updatePaginationButtons(totalPages);
                
            } catch (error) {
                console.error(`Error al cargar inspecciones: ${error.message}`);
                inspeccionesTbody.innerHTML = '';
                showErrorMessage(listaErrorContainer, `Error al cargar inspecciones: ${error.message}`);
                showNotification(`Error al cargar inspecciones: ${error.message}`, 'error');
            }
        }

        function updatePaginationButtons(pages) {
            if (!paginationButtons || !paginationPrev || !paginationNext) return;
            
            paginationButtons.innerHTML = '';
            
            // Desactivar o activar botones de anterior/siguiente
            paginationPrev.disabled = currentPage <= 1;
            paginationPrev.classList.toggle('opacity-50', currentPage <= 1);
            paginationNext.disabled = currentPage >= pages;
            paginationNext.classList.toggle('opacity-50', currentPage >= pages);
            
            if (pages <= 1) {
                // Si no hay páginas o solo hay una, no mostrar botones
                return;
            }
            
            // Determinar qué botones mostrar
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(pages, startPage + 4);
            
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }
            
            // Botón para la primera página
            if (startPage > 1) {
                const button = document.createElement('button');
                button.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors';
                button.textContent = '1';
                button.addEventListener('click', () => loadInspecciones(getCurrentFilters(), 1));
                paginationButtons.appendChild(button);
                
                if (startPage > 2) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200';
                    ellipsis.textContent = '...';
                    paginationButtons.appendChild(ellipsis);
                }
            }
            
            // Botones de páginas
            for (let i = startPage; i <= endPage; i++) {
                const button = document.createElement('button');
                if (i === currentPage) {
                    button.className = 'relative inline-flex items-center px-4 py-2 border border-primary-500 bg-primary-50 dark:bg-primary-900/30 text-sm font-medium text-primary-600 dark:text-primary-400 transition-colors';
                } else {
                    button.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors';
                }
                button.textContent = i.toString();
                button.addEventListener('click', () => loadInspecciones(getCurrentFilters(), i));
                paginationButtons.appendChild(button);
            }
            
            // Botón para la última página
            if (endPage < pages) {
                if (endPage < pages - 1) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200';
                    ellipsis.textContent = '...';
                    paginationButtons.appendChild(ellipsis);
                }
                
                const button = document.createElement('button');
                button.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors';
                button.textContent = pages.toString();
                button.addEventListener('click', () => loadInspecciones(getCurrentFilters(), pages));
                paginationButtons.appendChild(button);
            }
        }

        // Actualizar Estado desde la Tabla
        async function updateInspeccionStatus(inspeccionId, newStatus, statusCell) {
            if (!supabaseClient || !statusCell) return;
            
            console.log(`Actualizando ${inspeccionId} a ${newStatus}`);

            const originalHTML = statusCell.innerHTML; // Guardar HTML original
            statusCell.innerHTML = `
                <div class="flex items-center">
                    <div class="loading-inline border-gray-300 dark:border-gray-600 border-t-primary-600 dark:border-t-primary-400"></div>
                    <span class="ml-2">Actualizando...</span>
                </div>`;

            try {
                const { data, error } = await supabaseClient
                    .from('InspeccionICA_inspecciones')
                    .update({ 
                        estado_general: newStatus, 
                        fecha_ultima_actualizacion_estado: new Date().toISOString() 
                    })
                    .eq('id', inspeccionId)
                    .select('estado_general, bus_ppu')
                    .single();
                
                if (error) throw error;

                console.log(`Inspección ${inspeccionId} actualizada a ${data.estado_general}`);
                statusCell.innerHTML = getStatusBadge(data.estado_general); // Actualizar celda

                // Actualizar dropdown visualmente
                const dropdownLinks = statusCell.closest('tr')?.querySelectorAll('.status-change-link');
                if (dropdownLinks) {
                    dropdownLinks.forEach(link => {
                        link.classList.remove('font-bold', 'bg-gray-100', 'dark:bg-gray-700');
                        if (link.getAttribute('data-status') === data.estado_general) {
                            link.classList.add('font-bold', 'bg-gray-100', 'dark:bg-gray-700');
                        }
                    });
                }

                // Notificar al usuario
                showNotification(`Estado de inspección ${data.bus_ppu} actualizado a "${data.estado_general}"`, 'success');

                // Recargar datos del dashboard si está visible
                if (currentView === 'dashboard') loadDashboardData();

            } catch (error) {
                console.error(`Error al actualizar estado: ${error.message}`);
                showNotification(`Error al actualizar estado: ${error.message}`, 'error');
                statusCell.innerHTML = originalHTML; // Restaurar en caso de error
            }
        }

        function getCurrentFilters() {
            return {
                ppu: searchPpuInput?.value.trim() || '',
                terminal: filterTerminalSelect?.value || '',
                estado: filterEstadoSelect?.value || '',
                fechaInicio: filterFechaInicioInput?.value || '',
                fechaFin: filterFechaFinInput?.value || '',
            };
        }
        // --- FIN Lista y Actualización ---


        // --- Lógica Filtros ---
        function handleApplyFilters() {
            if (!searchPpuInput || !filterTerminalSelect || !filterEstadoSelect || !filterFechaInicioInput || !filterFechaFinInput) {
                console.error("handleApplyFilters: Faltan elementos.");
                return;
            }
            
            // Reiniciar a la página 1 al aplicar filtros
            currentPage = 1;
            loadInspecciones(getCurrentFilters(), 1);
        }
        // --- FIN Filtros ---


        // --- Lógica Modal Detalles ---
        async function openDetalleModal(inspeccionId) {
            if (!detalleModal || !modalContent || !supabaseClient) {
                console.error("openDetalleModal: Faltan elementos.");
                return;
            }
            
            showLoadingMessage(modalContent, 'Cargando detalles...');
            detalleModal.classList.remove('hidden'); // Mostrar modal
            
            try {
                const selectQuery = `*, 
                    terminal:InspeccionICA_terminales(nombre), 
                    supervisor:InspeccionICA_usuarios!InspeccionICA_inspecciones_supervisor_asignado_id_fkey(nombre_completo), 
                    cleaner:InspeccionICA_usuarios!InspeccionICA_inspecciones_cleaner_asignado_id_fkey(nombre_completo), 
                    InspeccionICA_detalles_inspeccion(
                        cumple, 
                        observacion_criterio, 
                        InspeccionICA_criterios(descripcion, numero_condicion)
                    )`;
                
                const { data, error } = await supabaseClient
                    .from('InspeccionICA_inspecciones')
                    .select(selectQuery)
                    .eq('id', inspeccionId)
                    .single();
                
                if (error) throw error;

                // Estructura mejorada del modal
                let modalHTML = `
                    <section class="mb-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white">Información General</h4>
                            <div>${getStatusBadge(data.estado_general)}</div>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-3 text-sm">
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Patente:</strong> 
                                <span class="text-gray-900 dark:text-white font-medium">${data.bus_ppu || 'N/A'}</span>
                            </div>
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Fecha:</strong> 
                                <span class="text-gray-900 dark:text-white">${formatDate(data.fecha_hora_inspeccion)}</span>
                            </div>
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Terminal:</strong> 
                                <span class="text-gray-900 dark:text-white">${data.terminal?.nombre || 'N/A'}</span>
                            </div>
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Actualización:</strong> 
                                <span class="text-gray-900 dark:text-white">${formatDate(data.fecha_ultima_actualizacion_estado)}</span>
                            </div>
                        </div>
                    </section>
                    
                    <section class="mb-6">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-3">Personal</h4>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-3 text-sm">
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Fiscalizador:</strong> 
                                <span class="text-gray-900 dark:text-white">${data.nombre_fiscalizador || 'N/A'}</span>
                            </div>
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Registrador:</strong> 
                                <span class="text-gray-900 dark:text-white">${data.nombre_registrador || 'N/A'}</span>
                            </div>
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Supervisor:</strong> 
                                <span class="text-gray-900 dark:text-white">${data.supervisor?.nombre_completo || 'No asignado'}</span>
                            </div>
                            <div class="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                                <strong class="text-gray-600 dark:text-gray-400">Cleaner:</strong> 
                                <span class="text-gray-900 dark:text-white">${data.cleaner?.nombre_completo || 'No asignado'}</span>
                            </div>
                        </div>
                    </section>
                    
                    <section class="mb-6">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-3">Observaciones Generales</h4>
                        <div class="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700">
                            <p class="text-sm text-gray-700 dark:text-gray-300">${data.observaciones_generales || 'Ninguna observación registrada'}</p>
                        </div>
                    </section>
                    
                    <section>
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-3">Detalles de Criterios (ICA A18)</h4>
                        <div class="space-y-3">`;

                const detallesOrdenados = data.InspeccionICA_detalles_inspeccion.sort((a, b) => 
                    (a.InspeccionICA_criterios?.numero_condicion ?? 999) - (b.InspeccionICA_criterios?.numero_condicion ?? 999)
                );
                
                if (detallesOrdenados.length === 0) {
                    modalHTML += '<p class="text-sm text-gray-500 dark:text-gray-400 p-4 text-center">No se encontraron detalles de criterios para esta inspección.</p>';
                } else {
                    detallesOrdenados.forEach(detalle => {
                        const criterio = detalle.InspeccionICA_criterios;
                        const criterioDesc = criterio ? `Condición #${criterio.numero_condicion}: ${criterio.descripcion}` : 'Criterio no encontrado';
                        const cumpleClass = detalle.cumple 
                            ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' 
                            : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';
                        const cumpleText = detalle.cumple ? 'Cumple' : 'No Cumple';
                        
                        modalHTML += `
                            <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                                <div class="p-3 bg-gray-50 dark:bg-gray-800/80 border-b border-gray-200 dark:border-gray-700">
                                    <p class="text-sm font-medium text-gray-800 dark:text-white">${criterioDesc}</p>
                                </div>
                                <div class="p-4">
                                    <div class="flex items-center mb-2">
                                        <span class="px-2.5 py-0.5 rounded-full text-xs font-medium ${cumpleClass}">
                                            ${cumpleText}
                                        </span>
                                    </div>
                                    ${detalle.observacion_criterio ? 
                                        `<div class="mt-2">
                                            <p class="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">Observación:</p>
                                            <p class="text-sm text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 p-2 rounded">${detalle.observacion_criterio}</p>
                                        </div>` 
                                        : ''
                                    }
                                </div>
                            </div>`;
                    });
                }
                
                modalHTML += `</div></section>`;
                modalContent.innerHTML = modalHTML;
            } catch (error) {
                modalContent.innerHTML = `
                    <div class="text-center py-8">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-red-500 dark:text-red-400 mx-auto mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10" />
                            <line x1="12" y1="8" x2="12" y2="12" />
                            <line x1="12" y1="16" x2="12.01" y2="16" />
                        </svg>
                        <h4 class="text-lg font-semibold text-red-600 dark:text-red-400 mb-2">Error al cargar detalles</h4>
                        <p class="text-gray-600 dark:text-gray-400">${error.message}</p>
                    </div>`;
                
                console.error("Error al cargar detalles:", error);
            }
        }
        // --- FIN Modal ---


        // --- Lógica Dashboard ---
        async function loadDashboardData() {
            if (!kpiHoy || !kpiPendientes || !kpiRevision || !kpiSolucionadas || !chartCanvas || !supabaseClient || !dashboardFilterTerminalSelect) {
                console.error("loadDashboardData: Faltan elementos.");
                return;
            }
            
            // Mostrar placeholders de carga
            kpiHoy.innerHTML = '<div class="shimmer h-8 w-16 rounded"></div>';
            kpiPendientes.innerHTML = '<div class="shimmer h-8 w-16 rounded"></div>';
            kpiRevision.innerHTML = '<div class="shimmer h-8 w-16 rounded"></div>';
            kpiSolucionadas.innerHTML = '<div class="shimmer h-8 w-16 rounded"></div>';
            
            const selectedTerminalId = dashboardFilterTerminalSelect.value;
            const selectedDateRange = dashboardDateRangeSelect?.value || 'all';
            const dateRange = calculateDateRange(selectedDateRange);

            try {
                // Consulta base
                let query = supabaseClient
                    .from('InspeccionICA_inspecciones')
                    .select('id, fecha_hora_inspeccion, estado_general, terminal_id, terminal:InspeccionICA_terminales(nombre)');
                
                // Agregar filtros
                if (selectedTerminalId) {
                    query = query.eq('terminal_id', selectedTerminalId);
                }
                
                if (selectedDateRange !== 'all') {
                    query = query.gte('fecha_hora_inspeccion', dateRange.start);
                    query = query.lte('fecha_hora_inspeccion', dateRange.end);
                }
                
                const { data, error } = await query;
                
                if (error) throw error;

                const hoyStr = new Date().toISOString().split('T')[0];
                const inspeccionesHoy = data.filter(ins => ins.fecha_hora_inspeccion.startsWith(hoyStr)).length;
                const pendientes = data.filter(ins => ins.estado_general === 'Pendiente').length;
                const revision = data.filter(ins => ins.estado_general === 'En Revisión').length;
                const solucionadas = data.filter(ins => ins.estado_general === 'Solucionado').length;
                const total = data.length;

                // Actualizar KPIs
                kpiHoy.textContent = inspeccionesHoy;
                kpiPendientes.textContent = pendientes;
                kpiRevision.textContent = revision;
                kpiSolucionadas.textContent = solucionadas;
                
                // Agregar indicadores de tendencia (ejemplo)
                if (kpiHoyChange) kpiHoyChange.innerHTML = '<span class="text-xs px-1.5 py-0.5 rounded bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400">+12%</span>';
                if (kpiPendientesBadge) {
                    if (pendientes > 0) {
                        kpiPendientesBadge.className = 'ml-2 text-xs font-medium px-2 py-1 rounded bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 relative badge-ping';
                        kpiPendientesBadge.textContent = 'Urgente';
                        
                        // Agregar efecto de ping
                        kpiPendientesBadge.classList.add('badge-ping');
                        kpiPendientesBadge.classList.add('before:bg-red-500', 'before:dark:bg-red-400', 'before:opacity-30');
                    } else {
                        kpiPendientesBadge.className = 'ml-2 text-xs font-medium px-2 py-1 rounded bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400';
                        kpiPendientesBadge.textContent = 'Al día';
                        
                        // Remover efecto de ping
                        kpiPendientesBadge.classList.remove('badge-ping');
                    }
                }
                if (kpiRevisionChange) kpiRevisionChange.innerHTML = '<span class="text-xs px-1.5 py-0.5 rounded bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-400">En proceso</span>';
                if (kpiSolucionadasChange) {
                    const porcentaje = total > 0 ? Math.round((solucionadas / total) * 100) : 0;
                    kpiSolucionadasChange.innerHTML = `<span class="text-xs px-1.5 py-0.5 rounded bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400">${porcentaje}%</span>`;
                }

                // Gráfico de distribución de estados
                const ctx = chartCanvas.getContext('2d');
                if (inspeccionesChartInstance) {
                    inspeccionesChartInstance.destroy();
                }
                
                const colorScheme = isDarkMode ? chartColors.dark : chartColors.light;
                
                inspeccionesChartInstance = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Pendiente', 'En Revisión', 'Solucionado'],
                        datasets: [{
                            label: 'Inspecciones',
                            data: [pendientes, revision, solucionadas],
                            backgroundColor: colorScheme.estados,
                            borderColor: isDarkMode ? '#1f2937' : '#ffffff',
                            borderWidth: 2,
                            hoverOffset: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    boxWidth: 12,
                                    color: colorScheme.text,
                                    font: { size: 12 }
                                }
                            },
                            title: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function(c) {
                                        const porcentaje = Math.round((c.parsed / (pendientes + revision + solucionadas)) * 100) || 0;
                                        return `${c.label}: ${c.parsed} (${porcentaje}%)`;
                                    }
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });
                
                // Gráfico de tendencias
                if (tendenciaCanvas) {
                    // Agrupar por fecha
                    const fechas = [];
                    const fechasCounts = {};
                    const estadosCounts = {
                        'Pendiente': {},
                        'En Revisión': {},
                        'Solucionado': {}
                    };
                    
                    // Obtener los últimos 7 días
                    for (let i = 6; i >= 0; i--) {
                        const date = new Date();
                        date.setDate(date.getDate() - i);
                        const formattedDate = date.toISOString().split('T')[0];
                        fechas.push(formattedDate);
                        fechasCounts[formattedDate] = 0;
                        
                        Object.keys(estadosCounts).forEach(estado => {
                            estadosCounts[estado][formattedDate] = 0;
                        });
                    }
                    
                    // Contar inspecciones por fecha y estado
                    data.forEach(ins => {
                        const fecha = ins.fecha_hora_inspeccion.split('T')[0];
                        if (fechasCounts[fecha] !== undefined) {
                            fechasCounts[fecha]++;
                            if (estadosCounts[ins.estado_general]) {
                                estadosCounts[ins.estado_general][fecha]++;
                            }
                        }
                    });
                    
                    // Preparar datos para el gráfico
                    const pendientesData = fechas.map(fecha => estadosCounts['Pendiente'][fecha]);
                    const revisionData = fechas.map(fecha => estadosCounts['En Revisión'][fecha]);
                    const solucionadasData = fechas.map(fecha => estadosCounts['Solucionado'][fecha]);
                    const totalesData = fechas.map(fecha => fechasCounts[fecha]);
                    
                    // Crear gráfico de tendencias
                    if (tendenciaChartInstance) {
                        tendenciaChartInstance.destroy();
                    }
                    
                    const ctxTendencia = tendenciaCanvas.getContext('2d');
                    tendenciaChartInstance = new Chart(ctxTendencia, {
                        type: 'line',
                        data: {
                            labels: fechas.map(f => {
                                // Formatear fecha para mostrar día/mes
                                const parts = f.split('-');
                                return `${parts[2]}/${parts[1]}`;
                            }),
                            datasets: [
                                {
                                    label: 'Total',
                                    data: totalesData,
                                    borderColor: isDarkMode ? '#60a5fa' : '#3b82f6',
                                    backgroundColor: 'transparent',
                                    tension: 0.3,
                                    borderWidth: 2,
                                    pointBackgroundColor: isDarkMode ? '#60a5fa' : '#3b82f6',
                                    pointRadius: 3,
                                    pointHoverRadius: 5
                                },
                                {
                                    label: 'Pendiente',
                                    data: pendientesData,
                                    borderColor: isDarkMode ? 'rgba(239, 68, 68, 0.6)' : 'rgba(239, 68, 68, 0.6)',
                                    backgroundColor: 'transparent',
                                    borderDash: [5, 5],
                                    tension: 0.3,
                                    borderWidth: 2,
                                    pointBackgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.8)' : 'rgba(239, 68, 68, 0.8)',
                                    pointRadius: 2,
                                    pointHoverRadius: 4
                                },
                                {
                                    label: 'En Revisión',
                                    data: revisionData,
                                    borderColor: isDarkMode ? 'rgba(245, 158, 11, 0.6)' : 'rgba(245, 158, 11, 0.6)',
                                    backgroundColor: 'transparent',
                                    borderDash: [5, 5],
                                    tension: 0.3,
                                    borderWidth: 2,
                                    pointBackgroundColor: isDarkMode ? 'rgba(245, 158, 11, 0.8)' : 'rgba(245, 158, 11, 0.8)',
                                    pointRadius: 2,
                                    pointHoverRadius: 4
                                },
                                {
                                    label: 'Solucionado',
                                    data: solucionadasData,
                                    borderColor: isDarkMode ? 'rgba(16, 185, 129, 0.6)' : 'rgba(16, 185, 129, 0.6)',
                                    backgroundColor: 'transparent',
                                    borderDash: [5, 5],
                                    tension: 0.3,
                                    borderWidth: 2,
                                    pointBackgroundColor: isDarkMode ? 'rgba(16, 185, 129, 0.8)' : 'rgba(16, 185, 129, 0.8)',
                                    pointRadius: 2,
                                    pointHoverRadius: 4
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        color: colorScheme.text,
                                        boxWidth: 12,
                                        padding: 15,
                                        font: { size: 11 }
                                    }
                                },
                                tooltip: {
                                    mode: 'index',
                                    intersect: false
                                }
                            },
                            scales: {
                                x: {
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    ticks: {
                                        color: colorScheme.text
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    ticks: {
                                        precision: 0,
                                        color: colorScheme.text
                                    }
                                }
                            }
                        }
                    });
                }
                
                // Gráfico de terminales
                if (terminalesCanvas) {
                    // Agrupar por terminal
                    const terminalesCount = {};
                    let otrosCount = 0;
                    
                    data.forEach(ins => {
                        const terminalNombre = ins.terminal?.nombre || 'Sin Terminal';
                        if (terminalesCount[terminalNombre]) {
                            terminalesCount[terminalNombre]++;
                        } else {
                            terminalesCount[terminalNombre] = 1;
                        }
                    });
                    
                    // Ordenar por cantidad
                    const sortedTerminales = Object.entries(terminalesCount)
                        .sort((a, b) => b[1] - a[1]);
                    
                    // Limitar a mostrar solo los top 5, el resto agruparlo en "Otros"
                    const topTerminales = sortedTerminales.slice(0, 5);
                    
                    if (sortedTerminales.length > 5) {
                        const otrosTerminales = sortedTerminales.slice(5);
                        otrosCount = otrosTerminales.reduce((sum, terminal) => sum + terminal[1], 0);
                        if (otrosCount > 0) {
                            topTerminales.push(['Otros', otrosCount]);
                        }
                    }
                    
                    // Crear gráfico de terminales
                    if (terminalesChartInstance) {
                        terminalesChartInstance.destroy();
                    }
                    
                    const ctxTerminales = terminalesCanvas.getContext('2d');
                    const labels = topTerminales.map(t => t[0]);
                    const values = topTerminales.map(t => t[1]);
                    
                    // Asignar colores
                    let backgroundColor = colorScheme.terminales.slice(0, labels.length);
                    
                    // Si hay más terminales que colores, generar colores adicionales
                    if (labels.length > backgroundColor.length) {
                        const additionalColors = Array(labels.length - backgroundColor.length)
                            .fill()
                            .map(() => getRandomColor());
                        backgroundColor = [...backgroundColor, ...additionalColors];
                    }
                    
                    terminalesChartInstance = new Chart(ctxTerminales, {
                        type: 'polarArea',
                        data: {
                            labels: labels,
                            datasets: [{
                                data: values,
                                backgroundColor: backgroundColor,
                                borderWidth: 1,
                                borderColor: isDarkMode ? '#1f2937' : '#ffffff'
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        color: colorScheme.text,
                                        boxWidth: 12,
                                        padding: 10,
                                        font: { size: 10 }
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.parsed;
                                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = Math.round((value / total) * 100);
                                            return `${context.label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                r: {
                                    ticks: {
                                        color: colorScheme.text,
                                        backdropColor: 'transparent',
                                        z: 10
                                    },
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    angleLines: {
                                        color: colorScheme.grid
                                    }
                                }
                            }
                        }
                    });
                }
                
                // Cargar inspecciones recientes
                loadRecentInspections();
                
            } catch (error) {
                console.error("Error al cargar datos del dashboard:", error);
                
                kpiHoy.textContent = 'Error';
                kpiPendientes.textContent = 'Error';
                kpiRevision.textContent = 'Error';
                kpiSolucionadas.textContent = 'Error';
                
                showNotification(`Error al cargar datos del dashboard: ${error.message}`, 'error');
                
                const kpiContainer = document.getElementById('dashboard-kpis');
                if (kpiContainer) {
                    kpiContainer.innerHTML += `
                        <div class="col-span-full bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 dark:border-red-500 text-red-700 dark:text-red-400 p-4 rounded">
                            <p>Error al cargar KPIs: ${error.message}</p>
                        </div>`;
                }
                
                if (inspeccionesChartInstance) {
                    inspeccionesChartInstance.destroy();
                }
            }
        }
        
        async function loadRecentInspections() {
            if (!recentInspections || !supabaseClient) return;
            
            try {
                const { data, error } = await supabaseClient
                    .from('InspeccionICA_inspecciones')
                    .select(`id, bus_ppu, fecha_hora_inspeccion, estado_general, terminal:InspeccionICA_terminales(nombre)`)
                    .order('fecha_hora_inspeccion', { ascending: false })
                    .limit(5);
                
                if (error) throw error;
                
                if (data.length === 0) {
                    recentInspections.innerHTML = `
                        <tr>
                            <td colspan="4" class="px-3 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                                No hay inspecciones recientes
                            </td>
                        </tr>`;
                    return;
                }
                
                recentInspections.innerHTML = '';
                
                data.forEach(ins => {
                    const tr = document.createElement('tr');
                    tr.className = 'hover:bg-gray-50 dark:hover:bg-gray-700/40';
                    
                    tr.innerHTML = `
                        <td class="px-3 py-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                            ${ins.bus_ppu}
                        </td>
                        <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                            ${ins.terminal?.nombre || 'N/A'}
                        </td>
                        <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                            ${getStatusBadge(ins.estado_general)}
                        </td>
                        <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                            ${formatShortDate(ins.fecha_hora_inspeccion)}
                        </td>`;
                    
                    recentInspections.appendChild(tr);
                });
                
            } catch (error) {
                console.error("Error al cargar inspecciones recientes:", error);
                recentInspections.innerHTML = `
                    <tr>
                        <td colspan="4" class="px-3 py-4 text-center text-sm text-red-500 dark:text-red-400">
                            Error al cargar: ${error.message}
                        </td>
                    </tr>`;
            }
        }
        // --- FIN Dashboard ---


        // --- Lógica Reportes ---
        function initReportesView() {
            if (!reportePeriodoSelect || !fechasPersonalizadas) return;
            
            // Inicializar eventos
            reportePeriodoSelect.addEventListener('change', () => {
                const isPeriodoCustom = reportePeriodoSelect.value === 'custom';
                fechasPersonalizadas.classList.toggle('hidden', !isPeriodoCustom);
            });
            
            // Inicializar fechas personalizadas con valores por defecto
            const today = new Date();
            const oneWeekAgo = new Date(today);
            oneWeekAgo.setDate(today.getDate() - 7);
            
            if (reporteFechaInicioInput) {
                reporteFechaInicioInput.valueAsDate = oneWeekAgo;
            }
            
            if (reporteFechaFinInput) {
                reporteFechaFinInput.valueAsDate = today;
            }
            
            // Evento para generar reporte
            if (generarReporteBtn) {
                generarReporteBtn.addEventListener('click', generateReport);
            }
        }
        
        async function generateReport() {
            if (!reporteTasaCumplimiento || !reporteTotal || !reporteTiempoPromedio || !supabaseClient) return;
            
            const periodoValue = reportePeriodoSelect?.value || 'month';
            const terminalId = reporteTerminalSelect?.value || '';
            const tipoReporte = reporteTipoSelect?.value || 'general';
            
            let fechaInicio, fechaFin;
            
            if (periodoValue === 'custom') {
                fechaInicio = reporteFechaInicioInput?.value || '';
                fechaFin = reporteFechaFinInput?.value || '';
                
                if (!fechaInicio || !fechaFin) {
                    showNotification('Debe seleccionar fechas de inicio y fin para un periodo personalizado', 'warning');
                    return;
                }
            } else {
                const dateRange = calculateDateRange(periodoValue);
                fechaInicio = dateRange.start.split('T')[0];
                fechaFin = dateRange.end.split('T')[0];
            }
            
            // Mostrar indicador de carga
            reporteTotal.innerHTML = '<div class="shimmer h-8 w-24 rounded"></div>';
            reporteTasaCumplimiento.innerHTML = '<div class="shimmer h-8 w-24 rounded"></div>';
            reporteTiempoPromedio.innerHTML = '<div class="shimmer h-8 w-24 rounded"></div>';
            
            if (reporteTendenciaChartInstance) reporteTendenciaChartInstance.destroy();
            if (reporteCriteriosChartInstance) reporteCriteriosChartInstance.destroy();
            
            showLoadingMessage(reporteCriteriosTbody, 'Generando reporte...');
            
            try {
                // Consulta para las inspecciones
                let query = supabaseClient.from('InspeccionICA_inspecciones')
                    .select(`
                        id, 
                        bus_ppu, 
                        fecha_hora_inspeccion, 
                        fecha_ultima_actualizacion_estado,
                        estado_general, 
                        terminal:InspeccionICA_terminales(id, nombre),
                        InspeccionICA_detalles_inspeccion(
                            id,
                            cumple,
                            criterio_id,
                            InspeccionICA_criterios(
                                id,
                                descripcion,
                                numero_condicion
                            )
                        )
                    `)
                    .gte('fecha_hora_inspeccion', `${fechaInicio}T00:00:00Z`)
                    .lte('fecha_hora_inspeccion', `${fechaFin}T23:59:59Z`);
                
                if (terminalId) {
                    query = query.eq('terminal_id', terminalId);
                }
                
                query = query.order('fecha_hora_inspeccion', { ascending: false });
                
                const { data, error } = await query;
                
                if (error) throw error;
                
                // Si no hay datos
                if (data.length === 0) {
                    reporteTotal.textContent = '0';
                    reporteTasaCumplimiento.textContent = '0%';
                    reporteTiempoPromedio.textContent = 'N/A';
                    
                    reporteCriteriosTbody.innerHTML = `
                        <tr>
                           <td colspan="4" class="px-4 py-6 text-center text-gray-500 dark:text-gray-400">
                                <div class="flex flex-col items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 dark:text-gray-500 mb-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z" />
                                        <path d="M13 2v7h7" />
                                        <path d="M9.8 15.5a.35.35 0 1 0 .4.5" />
                                        <path d="M13.4 12a3.5 3.5 0 0 0-6.8 1.5" />
                                    </svg>
                                    <p class="text-lg font-medium">No hay datos para el período seleccionado</p>
                                    <p class="text-sm mt-1">Pruebe con un rango de fechas diferente o cambie los filtros</p>
                                </div>
                            </td>
                        </tr>`;
                    
                    showNotification('No hay datos para generar el reporte con los filtros seleccionados', 'warning');
                    return;
                }
                
                // Procesar datos para el reporte
                const totalInspecciones = data.length;
                let totalCriteriosEvaluados = 0;
                let totalCriteriosCumplidos = 0;
                
                // Calcular tasa de cumplimiento
                data.forEach(inspeccion => {
                    const detalles = inspeccion.InspeccionICA_detalles_inspeccion || [];
                    totalCriteriosEvaluados += detalles.length;
                    totalCriteriosCumplidos += detalles.filter(detalle => detalle.cumple).length;
                });
                
                const tasaCumplimiento = totalCriteriosEvaluados > 0 
                    ? Math.round((totalCriteriosCumplidos / totalCriteriosEvaluados) * 100) 
                    : 0;
                
                // Calcular tiempo promedio de resolución (para inspecciones solucionadas)
                const inspeccionesSolucionadas = data.filter(ins => ins.estado_general === 'Solucionado');
                let tiempoPromedioHoras = 'N/A';
                
                if (inspeccionesSolucionadas.length > 0) {
                    let sumaTiempos = 0;
                    
                    inspeccionesSolucionadas.forEach(ins => {
                        const fechaInicio = new Date(ins.fecha_hora_inspeccion);
                        const fechaFin = new Date(ins.fecha_ultima_actualizacion_estado);
                        const diferenciaMilisegundos = fechaFin - fechaInicio;
                        const diferenciaHoras = diferenciaMilisegundos / (1000 * 60 * 60);
                        sumaTiempos += diferenciaHoras;
                    });
                    
                    tiempoPromedioHoras = Math.round(sumaTiempos / inspeccionesSolucionadas.length);
                }
                
                // Actualizar KPIs del reporte
                reporteTotal.textContent = totalInspecciones;
                reporteTasaCumplimiento.textContent = `${tasaCumplimiento}%`;
                reporteTiempoPromedio.textContent = tiempoPromedioHoras !== 'N/A' ? `${tiempoPromedioHoras}h` : 'N/A';
                
                // Datos para gráfico de tendencia temporal
                const fechasUnicas = [...new Set(data.map(ins => ins.fecha_hora_inspeccion.split('T')[0]))].sort();
                const estadosPorFecha = {
                    'Pendiente': {},
                    'En Revisión': {},
                    'Solucionado': {}
                };
                
                fechasUnicas.forEach(fecha => {
                    Object.keys(estadosPorFecha).forEach(estado => {
                        estadosPorFecha[estado][fecha] = 0;
                    });
                });
                
                data.forEach(ins => {
                    const fecha = ins.fecha_hora_inspeccion.split('T')[0];
                    if (estadosPorFecha[ins.estado_general] && estadosPorFecha[ins.estado_general][fecha] !== undefined) {
                        estadosPorFecha[ins.estado_general][fecha]++;
                    }
                });
                
                // Datos para el gráfico de tendencia
                const pendientesPorFecha = fechasUnicas.map(fecha => estadosPorFecha['Pendiente'][fecha] || 0);
                const revisionPorFecha = fechasUnicas.map(fecha => estadosPorFecha['En Revisión'][fecha] || 0);
                const solucionadosPorFecha = fechasUnicas.map(fecha => estadosPorFecha['Solucionado'][fecha] || 0);
                
                // Formatear fechas para mostrar (simplificar)
                const fechasFormateadas = fechasUnicas.map(fecha => {
                    const partes = fecha.split('-');
                    return `${partes[2]}/${partes[1]}`;
                });
                
                // Crear gráfico de tendencia
                if (reporteTendenciaChart) {
                    const colorScheme = isDarkMode ? chartColors.dark : chartColors.light;
                    const ctx = reporteTendenciaChart.getContext('2d');
                    
                    if (reporteTendenciaChartInstance) {
                        reporteTendenciaChartInstance.destroy();
                    }
                    
                    reporteTendenciaChartInstance = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: fechasFormateadas,
                            datasets: [
                                {
                                    label: 'Pendiente',
                                    data: pendientesPorFecha,
                                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.7)' : 'rgba(239, 68, 68, 0.7)',
                                    borderColor: isDarkMode ? 'rgba(239, 68, 68, 1)' : 'rgba(239, 68, 68, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'En Revisión',
                                    data: revisionPorFecha,
                                    backgroundColor: isDarkMode ? 'rgba(245, 158, 11, 0.7)' : 'rgba(245, 158, 11, 0.7)',
                                    borderColor: isDarkMode ? 'rgba(245, 158, 11, 1)' : 'rgba(245, 158, 11, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Solucionado',
                                    data: solucionadosPorFecha,
                                    backgroundColor: isDarkMode ? 'rgba(16, 185, 129, 0.7)' : 'rgba(16, 185, 129, 0.7)',
                                    borderColor: isDarkMode ? 'rgba(16, 185, 129, 1)' : 'rgba(16, 185, 129, 1)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        color: colorScheme.text,
                                        boxWidth: 12,
                                        padding: 15,
                                        font: { size: 11 }
                                    }
                                },
                                tooltip: {
                                    mode: 'index',
                                    intersect: false
                                }
                            },
                            scales: {
                                x: {
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    ticks: {
                                        color: colorScheme.text
                                    },
                                    stacked: true
                                },
                                y: {
                                    beginAtZero: true,
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    ticks: {
                                        precision: 0,
                                        color: colorScheme.text
                                    },
                                    stacked: true
                                }
                            }
                        }
                    });
                }
                
                // Análisis de criterios
                const criteriosEvaluados = new Map();
                
                // Recopilar datos de todos los criterios
                data.forEach(inspeccion => {
                    const detalles = inspeccion.InspeccionICA_detalles_inspeccion || [];
                    
                    detalles.forEach(detalle => {
                        const criterio = detalle.InspeccionICA_criterios;
                        if (!criterio) return;
                        
                        const criterioId = criterio.id;
                        const descripcion = `Condición #${criterio.numero_condicion}: ${criterio.descripcion}`;
                        
                        if (!criteriosEvaluados.has(criterioId)) {
                            criteriosEvaluados.set(criterioId, {
                                id: criterioId,
                                descripcion: descripcion,
                                total: 0,
                                cumple: 0,
                                noCumple: 0,
                                porcentajeIncumplimiento: 0
                            });
                        }
                        
                        const datosCriterio = criteriosEvaluados.get(criterioId);
                        datosCriterio.total++;
                        
                        if (detalle.cumple) {
                            datosCriterio.cumple++;
                        } else {
                            datosCriterio.noCumple++;
                        }
                        
                        // Recalcular porcentaje
                        datosCriterio.porcentajeIncumplimiento = Math.round((datosCriterio.noCumple / datosCriterio.total) * 100);
                    });
                });
                
                // Convertir a array y ordenar por % de incumplimiento (de mayor a menor)
                const criteriosOrdenados = Array.from(criteriosEvaluados.values())
                    .sort((a, b) => b.porcentajeIncumplimiento - a.porcentajeIncumplimiento);
                
                // Datos para gráfico de criterios
                if (reporteCriteriosChart && criteriosOrdenados.length > 0) {
                    const colorScheme = isDarkMode ? chartColors.dark : chartColors.light;
                    const ctx = reporteCriteriosChart.getContext('2d');
                    
                    // Limitar a los 5 criterios más críticos para la visualización
                    const topCriterios = criteriosOrdenados.slice(0, 5);
                    
                    if (reporteCriteriosChartInstance) {
                        reporteCriteriosChartInstance.destroy();
                    }
                    
                    reporteCriteriosChartInstance = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: topCriterios.map(c => `Condición #${c.descripcion.split('#')[1].split(':')[0]}`),
                            datasets: [
                                {
                                    label: 'Cumplimiento',
                                    data: topCriterios.map(c => c.cumple),
                                    backgroundColor: isDarkMode ? 'rgba(16, 185, 129, 0.7)' : 'rgba(16, 185, 129, 0.7)',
                                    borderColor: isDarkMode ? 'rgba(16, 185, 129, 1)' : 'rgba(16, 185, 129, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Incumplimiento',
                                    data: topCriterios.map(c => c.noCumple),
                                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.7)' : 'rgba(239, 68, 68, 0.7)',
                                    borderColor: isDarkMode ? 'rgba(239, 68, 68, 1)' : 'rgba(239, 68, 68, 1)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            indexAxis: 'y',
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        color: colorScheme.text,
                                        boxWidth: 12,
                                        padding: 15,
                                        font: { size: 11 }
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.raw;
                                            const datasetIndex = context.datasetIndex;
                                            const dataset = context.chart.data.datasets[datasetIndex];
                                            const total = dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = Math.round((value / total) * 100);
                                            return `${dataset.label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    ticks: {
                                        precision: 0,
                                        color: colorScheme.text
                                    },
                                    stacked: true
                                },
                                y: {
                                    grid: {
                                        color: colorScheme.grid
                                    },
                                    ticks: {
                                        color: colorScheme.text
                                    },
                                    stacked: true
                                }
                            }
                        }
                    });
                }
                
                // Actualizar tabla de criterios
                reporteCriteriosTbody.innerHTML = '';
                
                // Mostrar todos los criterios en la tabla
                criteriosOrdenados.forEach(criterio => {
                    const tendenciaIcon = criterio.porcentajeIncumplimiento > 30 
                        ? `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500 dark:text-red-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 18 6-6 6 6"/><path d="M6 6h12"/></svg>`
                        : (criterio.porcentajeIncumplimiento > 10 
                            ? `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500 dark:text-yellow-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12h14"/></svg>`
                            : `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 dark:text-green-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 6 6 6 6-6"/><path d="M6 18h12"/></svg>`);
                    
                    const tr = document.createElement('tr');
                    tr.className = 'hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-colors';
                    
                    tr.innerHTML = `
                        <td class="px-4 py-3 text-sm text-gray-900 dark:text-white">${criterio.descripcion}</td>
                        <td class="px-4 py-3 text-sm text-center text-gray-500 dark:text-gray-400 font-medium">${criterio.noCumple}</td>
                        <td class="px-4 py-3 text-sm text-center">
                            <span class="px-2.5 py-0.5 rounded-full text-xs font-medium ${criterio.porcentajeIncumplimiento > 30 
                                ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400' 
                                : (criterio.porcentajeIncumplimiento > 10 
                                    ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400' 
                                    : 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400')}">
                                ${criterio.porcentajeIncumplimiento}%
                            </span>
                        </td>
                        <td class="px-4 py-3 text-sm text-center text-gray-500 dark:text-gray-400">${tendenciaIcon}</td>
                    `;
                    
                    reporteCriteriosTbody.appendChild(tr);
                });
                
                showNotification('Reporte generado correctamente', 'success');
                
            } catch (error) {
                console.error("Error al generar reporte:", error);
                
                reporteTotal.textContent = 'Error';
                reporteTasaCumplimiento.textContent = 'Error';
                reporteTiempoPromedio.textContent = 'Error';
                
                reporteCriteriosTbody.innerHTML = `
                    <tr>
                        <td colspan="4" class="px-4 py-4 text-center text-red-500 dark:text-red-400">
                            Error al generar reporte: ${error.message}
                        </td>
                    </tr>`;
                
                showNotification(`Error al generar reporte: ${error.message}`, 'error');
            }
        }
        // --- FIN Reportes ---


        // --- Inicialización y Event Listeners ---
        document.addEventListener('DOMContentLoaded', () => {
            // Asignar Selectores DOM
            views = {
                dashboard: document.getElementById('dashboard-view'),
                registrar: document.getElementById('registrar-view'),
                lista: document.getElementById('lista-view'),
                reportes: document.getElementById('reportes-view')
            };
            
            navLinks = document.querySelectorAll('.nav-link');
            viewTitle = document.getElementById('view-title');
            
            // Formulario de registro
            registroForm = document.getElementById('registro-form');
            ppuSelect = document.getElementById('ppu');
            ppuErrorContainer = document.getElementById('ppu-error-container');
            terminalSelect = document.getElementById('terminal');
            terminalErrorContainer = document.getElementById('terminal-error-container');
            criteriosContainer = document.getElementById('criterios-container');
            criteriosCompletados = document.getElementById('criterios-completados');
            formMessage = document.getElementById('form-message');
            submitButton = document.getElementById('submit-button');
            
            // Lista de inspecciones
            inspeccionesTbody = document.getElementById('inspecciones-tbody');
            listaErrorContainer = document.getElementById('lista-error-container');
            searchPpuInput = document.getElementById('search-ppu');
            filterTerminalSelect = document.getElementById('filter-terminal');
            filterEstadoSelect = document.getElementById('filter-estado');
            filterFechaInicioInput = document.getElementById('filter-fecha-inicio');
            filterFechaFinInput = document.getElementById('filter-fecha-fin');
            applyFiltersButton = document.getElementById('apply-filters-button');
            exportButton = document.getElementById('export-button');
            
            // Modal de detalles
            detalleModal = document.getElementById('detalle-modal');
            modalContent = document.getElementById('modal-content');
            closeModalButton = document.getElementById('close-modal-button');
            closeModalButtonBottom = document.getElementById('close-modal-button-bottom');
            printModalButton = document.getElementById('print-modal-button');
            
            // Navegación y UI
            menuButton = document.getElementById('menu-button');
            sidebar = document.getElementById('sidebar');
            sidebarOverlay = document.getElementById('sidebar-overlay');
            themeToggleButton = document.getElementById('theme-toggle');
            themeToggleText = document.getElementById('theme-toggle-text');
            themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
            themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
            notificationButton = document.getElementById('notification-button');
            notificationCount = document.getElementById('notification-count');
            alertsContainer = document.getElementById('alerts-container');
            quickRegisterButton = document.getElementById('quick-register-button');
            
            // Asignaciones y usuarios
            supervisorSelect = document.getElementById('supervisor');
            cleanerSelect = document.getElementById('cleaner');
            
            // Dashboard
            kpiHoy = document.getElementById('kpi-hoy');
            kpiPendientes = document.getElementById('kpi-pendientes');
            kpiRevision = document.getElementById('kpi-revision');
            kpiSolucionadas = document.getElementById('kpi-solucionadas');
            kpiHoyChange = document.getElementById('kpi-hoy-change');
            kpiPendientesBadge = document.getElementById('kpi-pendientes-badge');
            kpiRevisionChange = document.getElementById('kpi-revision-change');
            kpiSolucionadasChange = document.getElementById('kpi-solucionadas-change');
            chartCanvas = document.getElementById('inspeccionesChart');
            tendenciaCanvas = document.getElementById('tendenciaChart');
            terminalesCanvas = document.getElementById('terminalesChart');
            dashboardFilterTerminalSelect = document.getElementById('dashboard-filter-terminal');
            dashboardDateRangeSelect = document.getElementById('dashboard-date-range');
            recentInspections = document.getElementById('recent-inspections');
            
            // Paginación
            paginationInfo = document.getElementById('pagination-info');
            paginationStart = document.getElementById('pagination-start');
            paginationEnd = document.getElementById('pagination-end');
            paginationTotal = document.getElementById('pagination-total');
            paginationPrev = document.getElementById('pagination-prev');
            paginationNext = document.getElementById('pagination-next');
            paginationButtons = document.getElementById('pagination-buttons');
            
            // Reportes
            reporteTerminalSelect = document.getElementById('reporte-terminal');
            reportePeriodoSelect = document.getElementById('reporte-periodo');
            reporteTipoSelect = document.getElementById('reporte-tipo');
            reporteFechaInicioInput = document.getElementById('reporte-fecha-inicio');
            reporteFechaFinInput = document.getElementById('reporte-fecha-fin');
            fechasPersonalizadas = document.getElementById('fechas-personalizadas');
            generarReporteBtn = document.getElementById('generar-reporte-btn');
            exportarReporteBtn = document.getElementById('exportar-reporte-btn');
            imprimirReporteBtn = document.getElementById('imprimir-reporte-btn');
            reporteTendenciaChart = document.getElementById('reporte-tendencia-chart');
            reporteCriteriosChart = document.getElementById('reporte-criterios-chart');
            reporteTotal = document.getElementById('reporte-total');
            reporteTasaCumplimiento = document.getElementById('reporte-tasa-cumplimiento');
            reporteTiempoPromedio = document.getElementById('reporte-tiempo-promedio');
            reporteCriteriosTbody = document.getElementById('reporte-criterios-tbody');

            // Configuración Supabase
            const SUPABASE_URL = 'https://tcmtxvuucjttngcazgff.supabase.co';
            const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRjbXR4dnV1Y2p0dG5nY2F6Z2ZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA3MjUwMDEsImV4cCI6MjA1NjMwMTAwMX0.2WcIjMUEhSM6j9kYpbsYArQocZdHx86k7wXk-NyjIs0';
            
            if (SUPABASE_URL.includes('TU_SUPABASE_URL') || SUPABASE_ANON_KEY.includes('TU_SUPABASE_ANON_KEY')) {
                showNotification('ERROR: Configura las credenciales de Supabase', 'error');
                return;
            }

            try {
                if (typeof supabase !== 'undefined' && supabase.createClient) {
                    supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                    console.log("Supabase client inicializado.");

                    // Añadir Event Listeners (solo una vez)
                    if (navLinks) {
                        navLinks.forEach(link => {
                            link.addEventListener('click', (e) => {
                                e.preventDefault();
                                const viewId = link.getAttribute('data-view');
                                showView(viewId);
                            });
                        });
                    }
                    
                    if (registroForm) {
                        registroForm.addEventListener('submit', handleRegistroSubmit);
                    }
                    
                    if (applyFiltersButton) {
                        applyFiltersButton.addEventListener('click', handleApplyFilters);
                    }
                    
                    if (closeModalButton) {
                        closeModalButton.addEventListener('click', () => detalleModal.classList.add('hidden'));
                    }
                    
                    if (closeModalButtonBottom) {
                        closeModalButtonBottom.addEventListener('click', () => detalleModal.classList.add('hidden'));
                    }
                    
                    if (detalleModal) {
                        detalleModal.addEventListener('click', (event) => {
                            if (event.target === detalleModal) {
                                detalleModal.classList.add('hidden');
                            }
                        });
                    }
                    
                    if (printModalButton) {
                        printModalButton.addEventListener('click', () => {
                            window.print();
                        });
                    }
                    
                    if (menuButton) {
                        menuButton.addEventListener('click', () => {
                            sidebar.classList.toggle('open');
                            sidebarOverlay.classList.toggle('hidden');
                        });
                    }
                    
                    if (sidebarOverlay) {
                        sidebarOverlay.addEventListener('click', () => {
                            sidebar.classList.remove('open');
                            sidebarOverlay.classList.add('hidden');
                        });
                    }
                    
                    if (themeToggleButton) {
                        themeToggleButton.addEventListener('click', toggleDarkMode);
                    }
                    
                    if (notificationButton) {
                        notificationButton.addEventListener('click', () => {
                            resetNotificationCount();
                        });
                    }
                    
                    if (quickRegisterButton) {
                        quickRegisterButton.addEventListener('click', () => {
                            showView('registrar');
                        });
                    }
                    
                    if (paginationPrev) {
                        paginationPrev.addEventListener('click', () => {
                            if (currentPage > 1) {
                                loadInspecciones(getCurrentFilters(), currentPage - 1);
                            }
                        });
                    }
                    
                    if (paginationNext) {
                        paginationNext.addEventListener('click', () => {
                            if (currentPage < totalPages) {
                                loadInspecciones(getCurrentFilters(), currentPage + 1);
                            }
                        });
                    }
                    
                    if (exportButton) {
                        exportButton.addEventListener('click', () => {
                            showNotification('Exportación iniciada. El archivo se descargará en breve.', 'info');
                            // Lógica de exportación (pendiente de implementar)
                        });
                    }
                    
                    if (exportarReporteBtn) {
                        exportarReporteBtn.addEventListener('click', () => {
                            showNotification('Exportación del reporte iniciada. El archivo se descargará en breve.', 'info');
                            // Lógica de exportación de reporte (pendiente de implementar)
                        });
                    }
                    
                    if (imprimirReporteBtn) {
                        imprimirReporteBtn.addEventListener('click', () => {
                            window.print();
                        });
                    }

                    // Listener Delegado para la tabla de inspecciones
                    if (inspeccionesTbody) {
                        inspeccionesTbody.addEventListener('click', (event) => {
                            // Botón Ver Detalles
                            if (event.target.closest('.view-details-button')) {
                                const button = event.target.closest('.view-details-button');
                                const id = button.getAttribute('data-id');
                                openDetalleModal(id);
                            }
                            
                            // Enlace Cambiar Estado
                            if (event.target.closest('.status-change-link')) {
                                event.preventDefault();
                                const link = event.target.closest('.status-change-link');
                                const id = link.getAttribute('data-id');
                                const newStatus = link.getAttribute('data-status');
                                const statusCell = link.closest('tr')?.querySelector('.status-cell');
                                
                                if (statusCell) {
                                    updateInspeccionStatus(id, newStatus, statusCell);
                                }
                                
                                // Opcional: cerrar el dropdown después de click
                                const dropdownOptions = link.closest('.status-options');
                                if (dropdownOptions) {
                                    dropdownOptions.style.display = 'none';
                                    setTimeout(() => {
                                        if (dropdownOptions) dropdownOptions.style.display = '';
                                    }, 100);
                                }
                            }
                        });
                    }

                    // Verificar preferencia de tema oscuro
                    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                        toggleDarkMode();
                    }

                    // Inicializar vistas y cargar datos iniciales
                    loadInitialData();

                } else {
                    throw new Error("Librería Supabase (supabase-js) no cargó.");
                }
            } catch (error) {
                console.error("Error de inicialización:", error);
                showNotification(`Error crítico: ${error.message}`, 'error');
                
                // Mostrar error en UI
                const mainContent = document.querySelector('main .overflow-y-auto');
                if (mainContent) {
                    mainContent.innerHTML = `
                        <div class="m-4 p-6 bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 text-red-800 dark:text-red-400 rounded-lg">
                            <div class="flex items-center mb-3">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10" />
                                    <line x1="12" y1="8" x2="12" y2="12" />
                                    <line x1="12" y1="16" x2="12.01" y2="16" />
                                </svg>
                                <h3 class="text-lg font-semibold">Error Crítico</h3>
                            </div>
                            <p class="ml-8">${error.message}</p>
                            <p class="mt-3 ml-8 text-sm">Por favor, revise la configuración de Supabase y recargue la página.</p>
                        </div>`;
                }
            }
        });
    </script>

</body>
</html>